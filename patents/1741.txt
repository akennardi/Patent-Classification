   Abstract
   A method for operating a gaming application in a computer
   based game development tool having a client gaming machine
 5 emulator connected to a gaming server emulator, wherein:                         a
   client module of a game application program is executed in
   the client gaming machine emulator; game parameters are
   determined in response to player input signals and
   dependent on logical rules for the game defined in said
10 client module, wherein said game parameters include a
   client identity code which is transmitted to the gaming
   server emulator; a server module of said game application
   program is executed in the gaming server emulator in
   response to said game parameters being communicated to
15 said server module; and outcome parameters are determined
   dependent on conditions for the game defined in said
   server module, dependent on said communicated game
   parameters and dependent on a generated random number.
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 1
                          Gaming System
   Related Application
 5 This application is a divisional application of Australian
   application no. <removed-apn>, which in turn is a divisional
   application of Australian application no. 2013201511,
   which in turn is a divisional application of Australian
   application no. 2012200893, which in turn is a divisional
10 application of Australian application no. 2005305408.                      The
   disclosures of each of these applications is incorporated
   herein by reference.
   Technical Field
15
   The present invention relates in general to a gaming
   system for operating computerized games of chance, the
   system comprising gaming machines communicating with a
   central gaming server.
20
   Background
   Traditionally, computerized games of chance have mainly
   been developed by providers of gaming machines and gaming
25 systems, whereas independent game developers largely have
   been barred from this market. The reasons are inter alia
   found in regulatory barriers with regard to betting,
   paying out winning prizes, security and the like. Another
   reason is the reluctance of the main providers of gaming
30 machines to expose themselves to increased competition.
   This has resulted in a rigid tradition that games as well
   as control and operation information has been implemented
   in decentralized systems provided by manufacturers of
   gaming machines, also called interactive video terminals
35 abbreviated IVT:s. However, this manner of manufacturing
   and operating gaming systems is inefficient, costly,
   difficult to update and offers a limited control of
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 2
   functionality and security. There is therefore a demand
   for more flexible gaming systems.
   Prior Art
 5
   Examples of prior art is found in the following patent
   publications, which for the sake of enablement of per se
   known parts of the invention are incorporated by reference
   in this specification.
10
   W003023647 discloses a method for developing gaming
   programs compatible with a computerized gaming operating
   system and apparatus.
15 W02004051588 discloses a hosted game development
   environment.
   US20030148806 discloses a method and apparatus for
   optimizing game design and development upon multiple game
20 systems.
   W003028828 discloses a game development architecture that
   decouples the game logic from the graphic logics.
25 US20040180722 discloses a centralized gaming system with
   modifiable remote display terminals.
   KR010007668 discloses a method and system for network game
   service.
30
   CA2358237 discloses a gaming hardware simulator.
   US20020028705 discloses a system and method for generating
   games and tests.
35
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 3
   Object of the Invention
   It is an object of the present invention to provide a
   system for operating games in a computer based gaming
 5 system, which enables game application production for an
   open gaming system architecture.
   Summary of the Invention
10 The invention provides a method for operating a gaming
   application in a computer based game development tool
   having a client gaming machine emulator connected to a
   gaming server emulator, wherein:
        a client module of a game application program is
15 executed in the client gaming machine emulator;
        game parameters are determined in response to player
   input signals and dependent on logical rules for the game
   defined in said client module, wherein said game
   parameters include a client identity code which is
20 transmitted to the gaming server emulator;
        a server module of said game application program is
   executed in the gaming server emulator in response to said
   game parameters being communicated to said server module;
   and
25      outcome parameters are determined dependent on
   conditions for the game defined in said server module,
   dependent on said communicated game parameters and
   dependent on a generated random number.
30 In an embodiment, said outcome parameters are communicated
   to the client game module and output signals dependent on
   the outcome parameters are generated and output to realise
   a presentation of the outcome.
35 In an embodiment, wherein all communication with the
   client game module is carried out via a client game
   application program interface.
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                               - 4
   In an embodiment, game context parameters are provided to
   the client game module by means of said client game
   application program interface.
 5
   In an embodiment, game configuration parameters are
   provided to the client game module by means of said client
   game application program interface.
10 In an embodiment, all communication with the server game
   module is carried out via a server game application
   program interface.
   In an embodiment, game context information is provided to
15 the server game module by means of said server game
   application program interface.
   In an embodiment, game context information comprises said
   determined game parameters.
20
   In an embodiment, said game parameters comprise a bet
   value.
   In an embodiment, said outcome parameters comprise a win
25 value.
   In an embodiment, game configuration parameters are
   provided to the server game module by means of said server
   game application program interface.
30
   The invention also provides a computer program product
   comprising computer program code portions devised to
   control a data processing means to perform the steps and
   functions of the above methods.
35
   The invention also provides a game development tool for
   operating a gaming application, the game development tool
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 5
   having a computer based client gaming machine emulator
   connected to a gaming server emulator, comprising computer
   based data processing means devised to perform the steps
   and functions of:
 5      executing a client module of a game application
   program in the client gaming machine emulator;
        determining game parameters in response to player
   input signals and dependent on logical rules for the game
   defined in said client module, wherein said game
10 parameters include a client identity code which is
   transmitted to the gaming server emulator;
        executing a server module of said game application
   program in the gaming server emulator in response to said
   game parameters being communicated to said server module;
15 and
        determining an outcome dependent on conditions for
   the game defined in said server module, dependent on said
   communicated game parameters and dependent on a generated
   random number.
20
   In an embodiment, the game development tool comprises:
        general server functions providing a random number
   generator and a database in the gaming server emulator;
        a server game application program interface provided
25 in the server and enabling communication with the server
   module of said game application program;
        a client handler devised to manage communications and
   functions of the client gaming machine emulator;
        a server application program interface provided in
30 the server and enabling internal communication between
   functional units of the server and external communication
   with functional units of the client gaming machine
   emulator;
        a client game application program interface provided
35 in the client gaming machine emulator and enabling
   communication with the client game module of said specific
   game application program; and
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 6
        a client control module devised to control
   communications and functions of the client gaming machine.
 5 In an embodiment, the game development tool comprises:
        a server game module of a game application program
   provided in the gaming server emulator and devised to
   execute functions of a game;
        a client game module of said game application program
10 provided in the client gaming machine and devised to
   execute functions of said game.
   In an embodiment, the game development tool comprises
   means devised to provide said server game module and/or
15 said client game module with a data structure for storing
   and accessing game context parameters.
   In an embodiment, said game context data structure is an
   instance of a data object provided by said game
20 application program interfaces respectively.
   In an embodiment, the game development tool comprises
   means devised to provide said server game module and/or
   said client game module with a data structure for storing
25 and accessing game configuration parameters.
   Other embodiments provide a gaming system concept in a
   client-server based architecture devised to operate
   modular game application programs for executing a game of
30 chance. A game application program comprises a game
   specific client module that is executed in a client gaming
   machine provided with a game application program interface
   and a game specific server module executed in a gaming
   server also provided with a game application program
35 interface. The gaming machine as well as the gaming server
   comprises general gaming functions that are available as
   services for different games executed by the respective
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

   gaming specific client and server modules. In the client
   gaming machine there are general client gaming functions
   such as a graphical user interface, a cashbox, sound
   presentation means, buttons and data communications means
 5 typically devised for providing an interface between the
   player and the specific game as well an interface between
   the specific game and the server. In the gaming server
   there are general server gaming functions in particular a
   random number generator, a database and a gaming
10 application program interface via which the gaming
   specific server module calls the general gaming functions
   upon a request from the client module.
   During execution of a game the client game module of the
15 game application program interacts with a player via
   input/output interfaces, typically a set of buttons and a
   display screen, and determines game parameters dependent
   on a set of logical rules for the game defined in the
   client game module and dependent on player input signals.
20 Game parameters are for example symbols, positions, card
   values or card colours dependent on the nature of the game
   as well as a value for a current bet. At game stages that
   involve the determining of a random outcome, selected game
   parameters are communicated together with a request to the
25 server game module. The server game module is executed and
   thereby determines a random outcome dependent on a set of
   logical rules that define conditions for outcomes,
   dependent on said selected game parameters and dependent
   on a random number that the server game module receives on
30 request from the random number generator provided in the
   server. The determined outcome, typically comprising a win
   or lose outcome and possibly a prize, is communicated back
   to the client game module which after receipt determines
   and outputs a game presentation dependent on the outcome.
35 The bet values and the prize values are preferably further
   dependent on configuration parameters that are centrally
   pre-settable and made available to the game application
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 8
   program. In this manner the game logics is separated from
   security sensitive, reliability sensitive and
   configuration related functions and information that are
   provided in the central server.
 5
   In accordance with an aspect of the invention the game
   application program modules are embedded behind the
   application program interfaces that provide a well defined
   interface for communication with functions external from
10 game application program. The gaming machine is for this
   purpose provided with a client game application program
   interface devised for communication with the game
   application program module. General client gaming
   functions, e.g. the mentioned input/output interface, are
15 provided in the client gaming machine and are available
   for the client game module via the client game application
   program interface. Similarly, the gaming server comprises
   general server gaming functions, e.g. the mentioned random
   number generator and a database, and a server game
20 application program interface via which the server game
   module communicates with the general server gaming
   functions.
   In accordance with another aspect of the invention, the
25 game application program interfaces comprise means for
   managing the respective game modules. These game manager
   functions comprise configuration handling and provisions
   of data structures that carries game parameters, game
   requests and game responses.
30
   In accordance with yet another aspect of the invention,
   the system is configured to record in the server database,
   inputs to the game software during execution. More
   specifically, at least user inputs and all random numbers
35 that occur during the execution of a game are stored in
   the server database with an associated game session
   identity code. In this context, the stored user input
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                               - 9
   should be understood to mean a selection of the actual
   user input, the received user input signal, a
   representation of the user input or the response by the
   game application program on a user input. This enables the
 5 reconstruction of a game session as well as verification
   of correctness as well as statistics and monitoring
   functions.
   Brief Description of Accompanying Drawings
10
   The inventive concept is further explained by means of
   examples and in conjunction with the accompanying
   drawings, in which:
         Fig 1 shows a schematic outline of a client-server
15 based gaming system according to an embodiment of the
   invention.
         Fig 2 shows a flow chart of a simple example of a
   gaming application.
         Fig 3 shows a variety of the gaming system in
20 accordance with the invention.
         Fig 4 shows a schematic view of different phases of a
   game.
         Fig 5 shows a schematic sequence diagram.
         Fig 6 shows a schematic illustration of an embodiment
25 of a game development tool.
   Detailed Description of Embodiments of the Invention
   The Figures illustrate the configuration of a gaming
30 system as well as a method for operating a gaming
   application, a method for developing a gaming application
   and a computer program product in accordance with the
   invention.
35 Fig 1 shows schematically a client and server based
   computerised gaming system with a gaming machine 2, herein
   also called a video lottery terminal, set up as a client
                                               10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 10
   gaming machine 2 and a gaming server 4 that are
   communicatively coupled. The gaming machine 2 and the
   gaming server 4 are provided with data processors, memory
   means, data communications interfaces, control programs,
 5 user input/output interfaces etc. in a per se well known
   manner. Different functions and features that are specific
   for the present invention are preferably realised by means
   of software computer program code executed on data
   processing means comprised in the server and in the client
10 respectively, or by means of specifically designed
   electronic components, or by means of combinations of
   software and electronic components. In the example of Fig
   1 there is only a single client gaming machine but of
   course a number of client gaming machines can be and is
15 normally connected to a server. In this context a server
   generally means hardware and software units in a central
   system that comprises and provides server functions,
   database functions and other centralised functions to
   connectable client gaming machines.
20
   The server 4 is provided with a game application program
   interface, in short called server game API 6, enabling
   communication between a server module of a specific game
   application program 8 and general server gaming functions
25 10,12,14,16 installed on the server. The general server
   gaming functions are provided to be available for any
   specific game application program independently of the
   specific game content. These general server gaming
   functions are typically critical functions such as a
30 database 10, a random number generator 12, an account
   service function 14, a log service function 16, or other
   functions that beneficially are shared and used by
   different specific game application programs.
35 The client gaming machine 2 is also provided with a game
   application program interface, in short called client game
   API 20, enabling communication between a client game
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 11
   module 18 of the specific game application program and
   general client gaming functions 22,24,26,28 installed on
   the client gaming machine 2 and used by different client
   game modules. The general client gaming functions are
 5 designed for assisting in implementing and executing a
   specific game on the client gaming machine 2 and are
   available for the client game module 18. These general
   client gaming functions are in different embodiments a
   selection of a graphical user interface GUI 22, a cashbox
10 function 24, a sound function 26, user input interface
   function, for example buttons, 28, data storage 29, a
   printer 3, a bar code reader 33 and other functions that
   are related to the performance of a game. The client game
   module 18 is communicatively coupled to the corresponding
15 server game module 8 for communicating requests 9 and
   responses 11 in order to utilize the general gaming
   functions provided in the server. For each game a message
   protocol for communication between the client module and
   the server module is generated, the protocol is for
20 example based on XML and is shared by the client and the
   server.
   A specific game application program in accordance with the
   invention thus comprises a server game module 8 and a
25 client game module 18 that communicate either directly or
   via an application program interface on the client side
   and the server side respectively as shown in Fig 1 and Fig
   3. The client game module 18 uses a selection of general
   client gaming functions that are available in the client
30 gaming machine, whereas the server module 8 uses a
   selection of general server gaming functions 10,12,14,16
   that are commonly used by different game applications and
   that are provided and available centrally in the server 4.
35 In accordance with an embodiment of the invention,
   interruption or abnormal termination of a player session
   during playing a game is handled by means of a reconnect
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 12
   function. The reconnect function is managed by storing the
   previous game configuration in the database at the
   beginning of each game round. AU user interactions and
   inputs that occur during the game round as well as the
 5 random numbers that were generated are stored in the
   server database. When a player session is terminated
   abnormally a reconnect voucher is created by the client
   gaming machine and output to the user. The voucher
   comprises account balance information and a voucher
10 identity code used to identify the interrupted game. The
   player can thereafter request a reconnect by inputting the
   voucher to the same or another gaming machine. The game is
   initialised with the game session properties that were
   stored at the beginning of the round and retrieved from
15 the database by means of the voucher identity code. Thus
   the reconnect function enables the player to continue the
   game at the same stage as when interrupted.
   Fig 3 shows a more detailed view of the configuration of a
20 client and a server in a gaming system in accordance with
   an embodiment of the invention and similar to that of Fig
   1. In the gaming server 4 the server game module 8 is
   embedded behind an application program interface called
   server game API 6 through which all communication of the
25 server game module 8 takes place. The gaming server 4
   further comprises a server application program interface
   in short called server API 40 through which all
   communication with the general server gaming functions
   10,12,14,16 from the part of the server game API 6 as well
30 as from the part of other server functions and external
   communication takes place. The server 4 is further
   provided with a server reconnect handler 32 that in a
   preferred embodiment is integrated with the server game
   API 6. The server reconnect handler 32 comprises
35 functional means devised to manage game session
   information relating to a reconnect identity code and
   devised to communicate inputs to and outputs from the
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 13
   server game module 8 for the purpose of re-executing the
   game session up to the point of interruption. This
   functionality realises a replay function and substitutes
   the client functionality during reconstruction of a game
 5 session.
   The gaming server 4 is also provided with further server
   function modules, in the exemplifying embodiment more
   specifically comprising a client handler 36 that is
10 communicatively coupled to the server API 40. The client
   handler 36 manages, inter alia handles and serves,
   communications and functions of the client 2 other than
   the specific game applications. As illustrated in the
   drawing with a double arrow, communications with the
15 client gaming machine 2 takes place via the server API 40
   and a similar client API 38 provided in the client gaming
   machine 2.
   In a manner similar to that described above, the
20 communication with the general client gaming functions is
   carried out via the client API 38. The client gaming
   machine 2 comprises a client control module 34 that
   controls communications and general functions of the
   client gaming machine other than the specific game
25 applications and communicates via the client API 38. In
   the gaming client 2 the client game module 18 is, similar
   to the configuration of the server, embedded behind an
   application program interface called client game API 20
   through which all communication of the client game module
30 18 takes place. The client 2 is further provided with a
   client reconnect handler 30 that in a preferred embodiment
   is integrated with the client game API 6. The client
   reconnect handler 30 comprises functional means devised to
   manage game session information relating to a reconnect
35 identity code and devised to communicate inputs to and
   outputs from the client game module 8 for the purpose of
   re-executing the game session up to the point of
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 14
   interruption. This functionality realises a replay
   function and substitutes the client functionality during
   reconstruction of a game session. In one embodiment, the
   replay is executed in the server after having retrieved
 5 stored game session information from the database to the
   server reconnect handler. In another embodiment, the
   replay is executed in the client after having retrieved
   the stored game session information from the database and
   communicated said information to the client reconnect
10 handler. In yet another embodiment, a part of the replay
   is executed in the server and a part is executed in the
   client. The latter variety allows for replaying
   overlapping or entire parts of the replay in the server
   and in the client, and to verify that the respective
15 replay execution is correct.
   Fig 2 shows schematically a simple example of a portion of
   a gaming application in accordance with the invention,
   more particularly a flip coin game of chance. The game is
20 run by executing the client game module 18 and the general
   client gaming functions of the flip coin gaming
   application in a client gaming machine in step 202.                 In
   step 204 the player is presented a message asking the
   player to bet on heads or tails. The player places a bet
25 206 and a result is calculated in 208. Step 208 involves
   the client game module 18 sending a request to the server
   game module 8 to generate an outcome of the game. The
   server game module in its turn calls the random number
   generator 12 and receives a random number in return. The
30 server game module calculates an outcome according to
   predetermined rules for the game and dependent on the
   returned random number. Thereafter, a response with the
   outcome Win or Lose is communicated back to the client
   game module. If the outcome is Lose 210 the player is
35 presented a message showing that player lost 212, and the
   game is ended in 214. If, on the other hand the outcome is
   Win 216 the player is presented a message asking player to
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 15
   collect the prize or double a bet again 218. If the player
   inputs a request to Double 224, a new result is calculated
   in 208 in the above manner. If on the other hand the
   player inputs a request to Collect 219, the prize, usually
 5 in the form of cash or credit money, is paid to the player
   and the game ends in 222. The payout of a prize again
   preferably involves requesting services from the server
   game module and for example utilizing the general server
   gaming functions account function 16 and database function
10 10.
   In accordance with the inventive concept, the client game
   module comprises computer program code portions devised to
   control the data processing system in the client gaming
15 machine to determine game parameters in response to player
   input signals and dependent on logical rules for the game
   defined in said client module. The server module comprises
   computer program code portions devised to control the data
   processing system to determine an outcome dependent on
20 conditions for the game defined in said server module,
   dependent on said game parameters being communicated from
   the client module and dependent on a random number
   received from the random number generator 12 that is
   provided in the server and available for the server game
25 module.
   The client module and the server module of the game
   application are thus isolated from functions other man
   game specific features by means of game APIs. For the
30 purpose of further isolating and de-coupling the game
   application program from sensitive functions a previous
   game configuration is stored in the server database at the
   beginning of each game round. All user interactions and
   inputs that occur during the game round as well as the
35 random numbers that were generated are stored in the
   server database. This enables reconstruction and
   verification of interrupted game sessions.
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 16
   Fig 4 illustrates schematically the lifecycle of a game in
   accordance with an embodiment of the invention drawn in
   relation to a timeline 424. A player session 401 is
 5 initiated by a player by inputting start commands via a
   user interface of the gaming machine. The player initiates
   a game and inputs a bet in terms of a monetary value by
   means of some kind of payment method such as coins or an
   account transaction and thereby starts a first game
10 session 402. The game session progresses in discrete steps
   herein called game rounds and exemplified with a first
   round 404 and a second round 410. Each round in turn
   progresses in discrete steps called game phases. So for
   example, round 404 comprises three game phases 406,407 and
15 408. The transition between game phases is driven by game
   round events which in different embodiments may have
   different content and different triggering mechanisms.
   A game round event is triggered by an input that starts
20 the generation of a set of associated elements of critical
   game session data that defines a game result preferably
   comprising the current bet value, a current generated
   random number and a current win value. The game round
   event would usually be triggered by a player making an
25 input through an I/O interface such as a push button that
   conveys game commands like "Deal cards!" in a poker game.
   In an embodiment of the invention, a game round event is
   triggered usually by an input from the player and game
30 parameters that define a game state are determined by
   means of logical rules realised in the client game module.
   The client game module contacts the server game module
   with a request in response to the triggering of a game
   round event. The server game module executes the request
35 and creates game result defining game session data for the
   current game phase. This data is stored in the server
   database and a response comprising the game result
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 17
   defining data is transmitted to the client whereupon a
   presentation of the game result is output to the player
   and the game phase is ended. The presentation of the game
   result to the player typically comprises updating a screen
 5 display of the gaming machine.
   At the beginning of each game phase, in Fig 4 illustrated
   with time indicators A, B, C, D, the gaming machine, e.g.
   the client game module, is set in a waiting mode waiting
10 for input from the player. When a game round event is
   triggered by the player, the gaming machine, e.g. the
   client game module and the server game module executes the
   game rules, moves the game process to the beginning of the
   next phase, stops and again goes into the waiting mode to
15 wait for player input. From a gaming system macro
   perspective the execution of a game progresses in discrete
   steps where the game phases are the smallest units of
   execution.
20 Fig 5 shows a schematic sequence diagram that illustrates
   communications between a client game module 502 of a
   gaming machine and a remote data storage and server game
   module 504, as well as executed steps occurring during a
   game phase depicted in relation to time lines 520. The
25 current game phase starts at 506 Time A and a waiting mode
   is entered and lasts until there is a game round event 512
   comprising transmitting a request 512 from the gaming
   machine/client game module 502. The request is received at
   the remote data storage/server game module 504 whereupon
30 in step 514 the request is executed and resulting game
   session data is stored in a database residing in the data
   storage. In the simpler embodiment not involving a client
   server configuration, a procedure call to generate the
   game result defining data would correspond to the request.
35 The execute and storage step 514 is completed at 508 Time
   Al and thereafter in step 516 a response comprising
   resulting game session data is transmitted from the remote
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 18
   data storage/server game module 504 to the gaming
   machine/client game module 502. After receipt of the
   response the gaming machine/client game module 502
   presents an output, e.g. an animation of a game outcome
 5 via the display screen dependent on the result of the
   execution in the game round event, which is terminated at
   510 Time B with a transition into the next game phase. The
   execution and storage step 514 is treated to be atomic in
   the sense that either it is completed or it is entirely
10 failed. A game phase is considered to be complete when the
   execution and storage step 514 has been completed, i.e. at
   508 Time Al, whether or not the following steps 516,518 up
   to 510 Time B have been completed when an interruption
   occurs.
15
   The communication between the gaming machine and the
   server as well as other steps that are performed for
   realising the invention are described in the following
   exemplifying embodiment based on the client-server
20 configuration. Reference is made to Fig 1-4. The numbered
   list below is merely for reference purpose and does not
   necessarily mean that the steps are performed in a
   sequence corresponding to the indicated numerical order.
25      1.   A player initiates a player session 401 on the
   client gaming machine 2 by inputting a start command to
   the client game module 18 via an I/O-interface          (22,24,28)
   which may be a traditional button or a button field on a
   touch screen. The initiation of a player session would
30 preferably also comprise a monetary transaction for bets
   in the game, for example by the player adding a coin to a
   cash box 24 or by means of an account transaction.
        2.   The client reconnect handler 30 comprised in the
35 client gaming machine 2 transmits a request for the
   reservation of a reconnect identity code together with a
   client identification code for identification of the
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 19
   specific gaming machine to the server. This request is
   received by the server reconnect handler 32 similarly
   comprised in the gaming server 4.
 5      3.   The request is executed by the server reconnect
   handler 32 whereby a reconnect identity code is generated
   and stored associated with the client identification code
   in a database 10.
10      4.   A player session identity code is generated and
   associated with the reconnect identity code in the
   database 10, and a player session 402 is established.
        5.   The reconnect identity code is transmitted to
15 the client reconnect handler 30 and is stored in local
   data storage 29 in the client gaming machine 2 for the
   purpose of enabling communication of the reconnect
   identity code to the player.
20      6.   A selected game is started by the player
   inputting a game start command to the game client module
   18 via the game application program interface 20 of the
   client gaming machine 2, and a request to start a game
   session is transmitted to the gaming server 4.
25
        7.   A game session identity code is generated and
   stored associated with the player session identity code, a
   game session 402 is established and a game phase 406 of a
   game round 404 is entered.
30
        8.   The player triggers a game round event by giving
   a game related input to the client game module 18
   whereupon a request for a service is transmitted to the
   server game module 8. An input signal from the player is
35 received by the client game module and a function
   determines game parameters dependent on logical rules
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                               - 20
   based on the nature of the game and generates a request to
   send to the server game module. The client game API
   provides an instance of a data structure, preferably in
   the shape of a data object, for the client game module to
 5 access and store game context parameters comprising said
   determined game parameters.   The determined game context
   parameters  and the generated request are then communicated
   to the game server module.
10      9.    The server game API receives the game context
   parameters and the request, and provides an instance of a
   data structure, preferably in the shape of a data object,
   for the server game module to access and store. The data
   structure comprises allocations for game context
15 parameters, the game request and the game response. The
   game response is the response of the server game module of
   to the game request generated by the client game module.
   The server game module thus accesses and receives or reads
   the game parameters and the request from the data
20 structure. The request is executed by the server game
   module 8 with the aid of the service functions of the
   server. The execution of this request would typically
   comprise the generation of a random number RNG and the
   determination of an outcome dependent on the RNG. Outcome
25 parameters are thus determined and a response is generated
   and stored in the game response allocation of the data
   structure. The game response and possibly also the game
   context parameters are then communicated back to the
   client game module. Possibly also game configuration
30 parameters are communicated to the client game module with
   the response.
        10.   An embodiment of the invention comprises a
   cashing mechanism for intermediary storage of a game
35 state. The game state information would comprise game
   context parameters, configuration parameters, previous
                                                10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 21
   requests, and previous responses. This feature is useful
   in multistate games.
        11.  A consistency or error check may occur in the
 5 server before the response is sent to the client. This
   would for example include calculating bet values and win
   values and compare with a resulting monetary balance of
   the player.
10      12.  Execution steps that are performed by the server
   game module 8 for each request as well as results and
   outcomes of the execution make up game session data, i.e.
   information that applies to the currently ongoing game
   session. A subset of the game session data is the result
15 of a game round event and applies to the current game
   phase. A selection of these game session data are compiled
   and cashed, i.e. temporarily stored in data storage of the
   server 8. Game session data generally comprises game
   parameters generated by the client game module as well as
20 parameters generated by the server game module. The
   selection may vary in different execution cases and
   embodiments, and would preferably comprise:     the bet value,
   the random number and the win value that are valid for the
   current game phase. The selection of game session data may
25 also comprise optional pieces of information regarding the
   sequence of events called event history, each request and
   response, a pot at stake, the request, the response to the
   client gaming machine, game configuration information and
   a status indicator devised to indicate whether the game
30 session has been completed or interrupted e.g. indicating
   last event = true/false.
        13.  The selection of game session data is stored in
   the database 10 and is transmitted with a response to the
35 client gaming machine 2. The received selection of game
   session data is cashed, i.e. temporarily stored in data
   storage of the client gaming machine 2.
                                               10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 22
        14.  The response, including information about the
   outcome, is received by the client game module. The
   outcome of the game round event is presented to the player
 5 for example via image output on a presentation screen of
   the client gaming machine 2 and possibly a win value being
   added to a monetary balance of the player.
        15.  The steps 8-12 are normally repeated until a
10 game round is ended for example by the fact that a bet
   monetary balance has been consumed, or the player selects
   a new game to play.
        16.  If an interruption occurs, for example triggered
15 when the client loses contact with the server, then the
   reconnect identity code for the current game execution
   instance is in the server database associated with a
   status indicator indicating that the game execution has
   been interrupted.
20
        17.  The reconstruction of an interrupted game can be
   implemented in various manners. One embodiment comprises
   of the following steps. With the reconnect identity code
   as a key, the associated game session data is retrieved
25 from the server database under the control of the server
   reconnect handler 30. The server reconnect handler 30 uses
   the retrieved game session data as input to the server
   game module 8 and generates the last response from the
   server game module that should have been transmitted to
30 the client gaming machine unless the interruption had
   occurred. In different embodiments Reconnect information
   comprising game session data is compiled and transmitted
   to the client reconnect handler 30 of the client gaming
   machine. In one embodiment this reconnect information
35 comprises the game identifications for the server game
   module and the client game module, game session data
   including an initial monetary balance, all requests and
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 23
   all responses of the event history. In the client gaming
   machine, the client game module is initiated and the game
   is executed by the client reconnect handler 30 using the
   game session data as input up to the last completed game
 5 phase before the point of interruption, called the
   reconnect target point. In contrast with the normal
   execution of a game, the requests that are generated in
   the reconnect execution are discarded and after each
   request the game is presented with the corresponding
10 response from the game session data. Since the client
   reconnect handler 30 has access to all the requests as
   well as the responses to the requests it is enabled that a
   check of a proper reconstruction of the game session can
   be performed. Preferably, the game is executed up to the
15 reconnect target point without presenting the intermediate
   results to the player in order to speed up the execution
   and avoid confusing the player.
        18.  After the last event and thereby the last
20 completed game phase has been executed, the corresponding
   result and state of the game is presented to the player
   via the graphical user interface and the game enters a
   waiting mode waiting for the next input from the player.
25 The invention has the effect that the game application
   program and its developers do not have to and is not
   allowed to deal with other functions than the logical
   rules for the game. These other functions comprise
   input/output interfaces, functions relating to statistics
30 parameters and configuration parameters, as well as
   problems and functions relating to the interruption,
   reconnect and reconstruction of a game. Instead the
   framework around the game application program controls its
   execution and the input for reconstruction of a game. The
35 invention has been described by way of exemplifying
   embodiments, but naturally there are various manners of
   realising the invention within the scope of the claims.
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 24
   Game Development Tool
   An embodiment of the invention comprises a method and a
 5 computer program product for realising a game development
   tool. A method of developing a computer based gaming
   application in accordance with the inventive concept
   comprises providing software adapted to simulate a client
   gaming machine and a server adapted to simulate a gaming
10 server. The client and the server are adapted to be
   executed in a common data processing system and are
   preferably implemented in a computer program product as
   computer executable code stored on a data carrier or a
   memory. This computer program product embodies a game
15 developer's kit enabling game developer to develop games
   for a gaming system in accordance with the inventive
   concept and provides a simulated game system configuration
   as described above but executable on a local stand alone
   computer.
20
   This aspect of the invention thus comprises providing in
   the server a general gaming function that is executable in
   response to a call; providing in the server a gaming
   application program interface enabling communication with
25 said general gaming function; and providing in the client
   a gaming application program interface enabling
   communication with said client. By means of the gaming
   application program interfaces the game developer
   generates and installs in the server a server module of a
30 specific gaming application program; generates and
   installs in the client a client module of the specific
   gaming application program; generates and installs in the
   client gaming specific functions that are executable in
   response to a call from the client module via the gaming
35 application program interface of the client.
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 25
   The client that thus simulates a gaming machine that
   operates as a container for the games, the graphics and
   the audio subsystems, respectively, and is responsible for
   loading, start-up, shut-down and communication with server
 5 and the player. Utility libraries, for example in XML or
   string format are provided as tools for generating
   reusable functions such as buttons, dice, movements of
   graphical items and the like.
10 In the development process the developer uses general
   gaming functions provided in the simulated server, for
   example a simulated database and a random number
   generator. The database is simulated by reading and
   writing XML files. Dynamic data that is normally, i.e. in
15 real system operation, stored in the database, such as
   player sessions and player account balance, is simulated
   in the server. The random number generator preferably
   comprises hardware, e.g. in the shape of a hardware based
   random number generator to be connected to a serial port
20 of the developer's computer and software components. In
   the possible absence of a hardware random number
   generator, a random number can be emulated.
   After having developed the program functionality the
25 developer compiles the generated server module, the
   generated client module and the generated gaming specific
   functions of the specific gaming application program into
   a data format that is executable on a gaming system in
   accordance with the inventive concept.
30
   The game development tool is devised to emulate all the
   client and server functions that are described above in
   the description of client and server functionality. Fig 6
   schematically illustrates an overview of functional units
35 and mechanisms that are emulated in the game development
   tool 602. Thus, an embodiment of a computer program
   product for developing a computer based gaming application
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 26
   for a gaming system comprises computer program code
   portions devised to a control a data processing system to
   realise number of emulators. A client gaming machine
   emulator 604 is devised to emulate a client gaming machine
 5 having means for executing a client module 610 of a game
   application program in the client gaming machine, and
   means for determining game parameters in response to
   player input signals and dependent on logical rules for
   the game defined in said client game module 610. The game
10 development tool 602 further comprises a gaming server
   emulator 612 devised to emulate a gaming server having
   means for executing a server game module 616 of said game
   application program in the gaming server in response to
   said game parameters being communicated to said server
15 module, and means for determining an outcome dependent on
   conditions for the game defined in said server game module
   616, dependent on said communicated game parameters and
   dependent on a random number. The random number is
   preferably generated in the gaming server emulator 612 by
20 means of an emulated random number generator comprised in
   a general server gaming functions emulator 618. Similarly,
   a database emulator is comprised to emulate a database of
   the emulated server 612.
25 The computer program product further comprises a client
   input/output interface emulator 606 devised to emulate an
   input/output interface of a client gaming machine for
   communicating with a player as well as other general
   client gaming functions  (not shown) as previously
30 described. Since the structure coincides with the client
   and server as described above numeral reference is also
   made to Fig 1 and Fig 3. Means are further provided for
   emulating the following functions:
        -a client control module (34) devised to control the
35 execution of functions and communications of the emulated
   client gaming machine 604, said client control module                      (34)
   being devised to control the execution of said client game
                                               10241013_1 (GHMatters) P24716.AU.5 8/05/18

                                 - 27
   module   (18,610) of a game application program provided for
   the emulated client gaming machine (604);
         -general client functions (22,24,26,28) providing
   input and output functions for communication between a
 5 user and functions of said gaming system;
         -a client game application program interface               (client
   game API, 20) enabling communication with a client game
   module of a game application program;
         -a client application program interface       (client API,
10 38) enabling communication between functions within the
   emulated client gaming machine 604 and between the
   emulated client gaming machine 604 and the emulated gaming
   server 612;
         -general server functions (618) providing a random
15 number generator    (12) and a database (10) in the emulated
   server   (4,612);
         -a server game application program interface               (server
   game API, 6, 614) provided in the emulated server                (4, 612)
   and enabling communication with the server module                (8, 616)
20 of said game application program;
         -a client handler (36) devised to manage
   communications and functions of the emulated client gaming
   machine   (2, 604);
         -a server application program interface       (server API,
25 40) provided in the emulated server (4) and enabling
   internal communication between functional units
    (6,8,10,12,32,36) of the emulated server   (4, 612 ) and
   external communication with functional units of the
   emulated client gaming machine (2, 604).
30
   The effect of the game development tool is that a game
   developer can work, develop and test his game application
   program in an environment that reproduces a real runtime
   environment for the game.
                                                10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 28
   Claims
   1.   A method for operating a gaming application in a
   computer based game development tool having a client
 5 gaming machine emulator connected to a gaming server
   emulator, wherein:
        a client module of a game application program is
   executed in the client gaming machine emulator;
        game parameters are determined in response to player
10 input signals and dependent on logical rules for the game
   defined in said client module, wherein said game
   parameters include a client identity code which is
   transmitted to the gaming server emulator;
        a server module of said game application program is
15 executed in the gaming server emulator in response to said
   game parameters being communicated to said server module;
   and
        outcome parameters are determined dependent on
   conditions for the game defined in said server module,
20 dependent on said communicated game parameters and
   dependent on a generated random number.
   2.   The method of claim 1, wherein said outcome
   parameters are communicated to the client game module and
25 output signals dependent on the outcome parameters are
   generated and output to realise a presentation of the
   outcome.
   3.   The method of any of the preceding claims, wherein
30 all communication with the client game module is carried
   out via a client game application program interface.
   4.   The method of any one of the preceding claims,
   wherein game context parameters are provided to the client
35 game module by means of said client game application
   program interface.
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 29
   5.   The method of any one of the preceding claims,
   wherein game configuration parameters are provided to the
   client game module by means of said client game
   application program interface.
 5
   6.   The method of any one of the preceding claims,
   wherein all communication with the server game module is
   carried out via a server game application program
   interface.
10
   7.   The method of any one of the preceding claims,
   wherein game context information is provided to the server
   game module by means of said server game application
   program interface.
15
   8.   The method of any one of the preceding claims,
   wherein game context information comprises said determined
   game parameters.
20 9.   The method of any one of the preceding claims,
   wherein said game parameters comprise a bet value.
   10.  The method of any one of the preceding claims,
   wherein said outcome parameters comprise a win value.
25
   11.  The method of any one of the preceding claims,
   wherein game configuration parameters are provided to the
   server game module by means of said server game
   application program interface.
30
   12.  A computer program product comprising computer
   program code portions devised to control a data processing
   means to perform the steps and functions of any one of the
   preceding claims.
35
   13.  A game development tool for operating a gaming
   application, the game development tool having a computer
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 30
   based client gaming machine emulator connected to a gaming
   server emulator, comprising computer based data processing
   means devised to perform the steps and functions of:
        executing a client module of a game application
 5 program in the client gaming machine emulator;
        determining game parameters in response to player
   input signals and dependent on logical rules for the game
   defined in said client module, wherein said game
   parameters include a client identity code which is
10 transmitted to the gaming server emulator;
        executing a server module of said game application
   program in the gaming server emulator in response to said
   game parameters being communicated to said server module;
   and
15      determining an outcome dependent on conditions for
   the game defined in said server module, dependent on said
   communicated game parameters and dependent on a generated
   random number.
20 14.  The game development tool of claim 13, comprising:
        general server functions providing a random number
   generator and a database in the gaming server emulator;
        a server game application program interface provided
   in the server and enabling communication with the server
25 module of said game application program;
        a client handler devised to manage communications and
   functions of the client gaming machine emulator;
        a server application program interface provided in
   the server and enabling internal communication between
30 functional units of the server and external communication
   with functional units of the client gaming machine
   emulator;
        a client game application program interface provided
   in the client gaming machine emulator and enabling
35 communication with the client game module of said specific
   game application program; and
        a client control module devised to control
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

                              - 31
   communications and functions of the client gaming machine.
   15.  The game development tool of claim 13 or claim 14,
   comprising:
 5      a server game module of a game application program
   provided in the gaming server emulator and devised to
   execute functions of a game;
        a client game module of said game application program
   provided in the client gaming machine and devised to
10 execute functions of said game.
   16.  The game development tool of any one of claims 13-15,
   comprising means devised to provide said server game
   module and/or said client game module with a data
15 structure for storing and accessing game context
   parameters.
   17.  The game development tool of any one of claims 13-16,
   wherein said game context data structure is an instance of
20 a data object provided by said game application program
   interfaces respectively.
   18.  The game development tool of any one of claims 13-17,
   comprising means devised to provide said server game
25 module and/or said client game module with a data
   structure for storing and accessing game configuration
   parameters.
                                              10241013_1 (GHMatters) P24716.AU.5 8/05/18

<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
