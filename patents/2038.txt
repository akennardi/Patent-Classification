                                           ABSTRACT
       A system and method are provided for executing multilateral transactional bookkeeping
workflows between a plurality of participants, including receiving previously agreed and
formalized rules, receiving an authorized decision, evolving an agreement based on the
authorized decision and the rules, notifying participants in the agreement of the evolved
agreement, and storing the evolved agreement with evidence of notification in a shared
append-only ledger.

                                  DIGITAL ASSET PLATFORM
TECHNICAL FIELD
[0001]      The present disclosure relates to a digital asset platform and method of use.
RELATED ART
[0002]      Existing  closed,   centrally administered     ledgers utilized for settling assets,
obligations, and transactions are considered opaque and error-prone. This makes oversight
cumbersome, requires many duplicative processes and ledgers, and allows the potential for
fraud.    The first and currently largest alternative to the existing ledger architectures is
represented by a distributed digital ledger called Bitcoin, which uses a blockchain data
structure. A fundamental principle of Bitcoin's operation is that the system is set up as a peer
to-peer transaction mechanism that utilizes public-private key cryptography, has no central
intermediary or central repository, and allows all participants in the network to hold and
validate the integrity of a full copy of the ledger in real time. The Bitcoin blockchain was
designed in order to create a trustless native asset, bitcoin, which could be exchanged with
pseudonymous parties across the globe.
[0003]      Current platforms built to support digital assets on top of Bitcoin-like or blockchain
like systems are not generally structured to provide comprehensive protection to financial
institutions as may be required by law for many of their existing transaction businesses. These
platforms may not have contemplated the regulatory regime for financial institutions and
financial transactions in general. As a result, institutional investors have hesitated to enter the
digital assets market and have avoided the use of distributed ledgers for their existing
businesses.
[0003a]     Throughout this specification the word "comprise", or variations such as "comprises"
or "comprising", will be understood to imply the inclusion of a stated element, integer or step,
or group of elements, integers or steps, but not the exclusion of any other element, integer or
step, or group of elements, integers or steps.
[0003b]     Any discussion of documents, acts, materials, devices, articles or the like which has
been included in the present specification is not to be taken as an admission that any or all of
                                                 1

these matters form part of the prior art base or were common general knowledge in the field
relevant to the present disclosure as it existed before the priority date of each claim of this
application.
SUMMARY
[0004]     The exemplary embodiments disclosed herein provide a distributed system for
executing transactional workflows among a plurality of participants.          In an exemplary
embodiment, there is provided a computer-implemented method of manipulating data
structures for distributed multilateral bookkeeping includes receiving previously agreed and
formalized rules to define agreement evolution for one or more participants; receiving an
authorized decision; evolving an agreement, wherein evolving the agreement is based on the
authorized decision and the agreed and formalized rules; calculating a shared secret between
each participant to the agreement and a ledger writer; determining a notification token to notify
participants in the agreement of the evolved agreement wherein the notification token is
encrypted with the shared secret; writing, with a ledger writer, the notification token in the
shared append-only ledger as evidence of notification of the evolved agreement.
[0005]     The method may include: reading, with a ledger reader, notification token(s) on the
shared append-only ledger with the shared secret; detecting contradicting agreements; and
excluding a contradicting agreement based on evidence from the notification token on the
shared append-only ledger. The method may include providing participants partial insight to
agreements through a partial agreement store sufficient for their own authorization and
records, wherein the evolved agreement can be validated with the participants partial insight
and the notification token of the evolved agreement.       The partial agreement store of the
participants may remain without contradiction to other participant's records and is validatable
within the bounds of their visibility.
[0006]     The method may include automatically auditing authorization and evolution of the
agreement.     The method may be employed where the append-only ledger comprises a
blockchain.
[0007]     The method may include executing transactional workflows between a plurality of
participants including: interacting with the append-only ledger using a Command Query
Responsibility Segregation (CQRS) pattern having a plurality of modules, wherein the modules
                                               2

include: a ledger writer configured to record evidence indicative of a transaction dataset
through a first write module of the CQRS to the ledger; and a ledger reader configured to
detect evidence on the ledger having a matching notification token, and read such matching
evidence through a first read module of the CQRS.
[0008]      The method may be employed where the notification token as evidence indicative of
an agreement or evolved agreement comprises a timestamp indicative of recordation time of
the notification token on the ledger.     The method may be employed where the evidence
indicative of an agreement comprises a Merkle hash of the transaction dataset. The method
may further be employed where the hashed transaction dataset comprises proof of a
corresponding multilaterally authorized business intent message and proof of a current
agreement used to translate the business intent message into the transaction dataset.
[0009]      The method may be employed where each of a plurality of distributed nodes
comprise different modules of the CQRS.        The method may further be employed where a
reduced subset of the nodes comprises the first write module of the CQRS.
[0010]      The method may be employed where the matching notification token is detected
through a second read module of the CQRS. The method may include issuing an
announcement of identities on the ledger.       The method may further include computing a
unique shared secret for each participant and log-writer pair. The method may be employed
where the matching notification token is recognizable by involved parties but remains secret to
others.
[0011]      The method may be employed where the transaction dataset stores the current
agreement as an abstract syntax tree (AST). The method may further be employed where the
transaction dataset is updated with Merkle hashes to form a Merklized abstract syntax tree
(MAST).
[0012]      The method may include further auditing one or more evolutions of an agreement.
This may include reading, with a ledger reader, notification token(s) on the shared append-only
ledger with the shared secret; and determining, based on evidence from the notification
token(s), that an evolution of an agreement from a first transaction dataset to a second
transaction dataset was properly authorized and properly executed, and that all participants
were notified of the changes pertinent to them. The method may further be employed where
auditing further proves that participants were not notified of changes not pertinent to them.
                                                3

[0013]      In an exemplary embodiment, there is provided a system, comprising a plurality of
computers, for distributed multilateral bookkeeping includes a business intent unit configured
to receive previously agreed and formalized rules; a choice unit configured to receive an
authorized decision from the business intent unit; a processing unit configured to evolve an
agreement based on the authorized decision and the rules; a notification unit configured to
notify participants in the agreement of the evolved agreement; and an append-only ledger
configured to store evidence of notification of the evolved agreement.
[001 3a]    In one embodiment, there is provided a system, comprising a plurality of computers,
for distributed multilateral bookkeeping comprising: one or more processors to: receive
previously agreed and formalized rules to define agreement evolution for one or more
participants; receive an authorized decision; evolve an agreement, wherein evolving the
agreement is based on the authorized decision and the agreed and formalized rules; calculate
a shared secret between each participant and a ledger writer; determine a notification token to
notify participants in the agreement of the evolved agreement, wherein the notification token is
encrypted with the shared secret; and a ledger writer to write the notification token in a shared
append-only ledger as evidence of notification of the evolved agreement.
[0014]      The system may include: a ledger reader to read notification token(s) on the shared
append-only ledger with the shared secret; an audit unit configured to detect contradicting
agreements and exclude a contradicting agreement based on evidence from the notification
token on the shared append-only ledger. The system may further be employed where the
audit unit supports automatically auditing authorization and evolution of the agreement.
[0015]      The system may be employed where the shared append-only ledger is accessible
to nodes associated with the participants and wherein the shared append-only ledger provides
participants partial insight to agreements through a partial agreement store sufficient for their
own authorization and records, wherein evolved agreement can be validated with the
participants partial insight and the notification token of the evolved agreement. The partial
agreement store of participants may remain without contradiction to other participant's records
and is validatable within the bounds of their visibility.
[0016]      The system may include a Command Query Responsibility Segregation (CQRS)
pattern having a plurality of modules supporting interaction with the append-only ledger; a
ledger writer configured to record evidence indicative of a transaction dataset through a first
                                                  4

write module of the CQRS to the ledger; and a ledger reader configured to detect evidence on
the ledger having a matching notification token, and read such matching evidence through a
first read module of the CQRS.
[0017]      The system may be employed where the append-only ledger comprises a
blockchain. The system may be employed where the notification token as evidence indicative
of an agreement comprises a timestamp indicative of recordation time of the notification token
on the ledger.
[0018]      The system may be employed where the evidence indicative of an agreement
comprises a Merkle hash of the transaction dataset. The system may further be employed
where the hashed transaction dataset comprises proof of a corresponding multilaterally
authorized business intent message and proof of a current agreement used to translate the
business intent message into the transaction dataset.
[0019]      The system may be employed where each of a plurality of distributed nodes
comprise different modules of the CQRS.        The system may further be employed where a
reduced subset of the nodes comprises the first write module of the CQRS.
[0020]      The system may be employed where each node is configured to maintain a
received announcement of identities on the ledger. The system may be employed where each
node is configured to compute a unique shared secret corresponding to its participant and any
log-writer.   The system may be employed where the matching notification token is
recognizable by involved parties but secret to others. The system may be employed where the
matching notification token is detected through a second read module of the CQRS.
[0021]      The system may be employed where the transaction dataset stores the current
agreement as an abstract syntax tree (AST). The system may further be employed where the
transaction dataset is updated with Merkle hashes to form a Merklized abstract syntax tree
(MAST).
[0022]      The system may include an auditor unit to audit one or more evolutions of an
agreement, the auditor unit configured to: read notification token(s) on the shared append-only
ledger with the shared secret; and determine, based on evidence from the notification token(s),
that an evolution of an agreement from a first transaction dataset to a second transaction
dataset was properly authorized and properly executed, and that all participants were notified
                                                5

of the changes pertinent to them. The system may be employed where the auditor further
proves that participants were not notified of changes not pertinent to them.
[0023]      An exemplary embodiment program storage device tangibly embodying program
steps executable by a computer for manipulating data structures in distributed multilateral
bookkeeping includes program steps for receiving previously agreed and formalized rules to
define agreement evolution for one or more participants; receiving an authorized decision;
evolving an agreement, wherein evolving the agreement is based on the authorized decision
and the agreed and formalized rules; calculating a shared secret between each participant to
the agreement and a ledger writer; and determining a notification token to notify participants in
the agreement of the evolved agreement; wherein the notification token is encrypted with the
shared secret; and writing, with a ledger writer, the notification token in the shared append-only
ledger as evidence of notification of the evolved agreement.
[0024]      The device may include steps for: reading, with a ledger reader, notification token(s)
on the shared append-only ledger with the shared secret; detecting contradicting agreements;
and excluding a contradicting agreement based on evidence from the notification token on the
shared append-only ledger. The device may include steps for: providing participants partial
insight to agreements through a partial agreement store sufficient for their own authorization
and records, wherein the evolved agreement can be validated with the participants partial
insight and the notification token of the evolved agreement. The partial agreement store of the
participants may remain without contradiction to other participant's records and is validatable
within the bounds of their visibility.
[0025]      The device may include steps for automatically auditing authorization and evolution
of the agreement. The device may be employed where the append-only ledger comprises a
blockchain.
[0026]      The device may include steps for executing transactional workflows between a
plurality of participants including: interacting with the append-only ledger using a Command
Query Responsibility Segregation (CQRS) pattern having a plurality of modules, wherein the
modules include: a ledger writer configured to record evidence indicative of a transaction
dataset through a first write module of the CQRS to the ledger; and a ledger reader configured
to detect evidence on the ledger having a matching notification token, and read such matching
evidence through a first read module of the CQRS.
                                                 6

[0027]      The device may be employed where the notification token as evidence indicative of
an agreement or evolved agreement includes a timestamp indicative of recordation time of the
notification token on the ledger. The device may be employed where the evidence indicative
of an agreement comprises a Merkle hash of the transaction dataset. The device may further
be employed where the hashed transaction dataset comprises proof of a corresponding
multilaterally authorized business intent message and proof of a current agreement used to
translate the business intent message into the transaction dataset.
[0028]      The device may be employed where each of a plurality of distributed nodes
comprise different modules of the CQRS.        The device may further be employed where a
reduced subset of the nodes comprises the first write module of the CQRS.
[0029]      The device may be employed where the matching notification token is detected
through a second read module of the CQRS. The device may include steps for issuing an
announcement of identities on the ledger. The device may include steps for computing a
unique shared secret for each participant and log-writer pair. The device may be employed
where the matching notification token is recognizable by involved parties but remains secret to
others.
[0030]      The device may be employed where the transaction dataset stores the current
agreement as an abstract syntax tree (AST). The device may further be employed where the
transaction dataset is updated with Merkle hashes to form a Merklized abstract syntax tree
(MAST).
[0031]      The device may include steps for auditing one or more evolutions of an agreement
comprising: reading, with a ledger reader, notification token(s) on the shared append-only
ledger with the shared secret; and determining, based on evidence from the notification
token(s), that an evolution of an agreement from a first transaction dataset to a second
transaction dataset was properly authorized and properly executed, and that all participants
were notified of the changes pertinent to them. The device may further be employed where
auditing further proves that participants were not notified of changes not pertinent to them.
BRIEF DESCRIPTION OF THE DRAWINGS
                                                7

[0032]      Illustrative, non-limiting exemplary embodiments may be more clearly understood
from the following detailed description, particularly when taken in conjunction with the
accompanying drawings, in which:
[0033]      Figure 1 is a schematic block diagram showing evolution of a Digital Asset Modeling
Language (DAMLTM)          agreement through a decision in accordance with an exemplary
embodiment of the present disclosure;
[0034]      Figure 2 is a schematic Abstract Syntax Tree (AST) parsing diagram in accordance
with an exemplary embodiment of the present disclosure;
[0035]      Figure 3 is a schematic block diagram showing evolution of a DAMLTM agreement
through a decision validated with Distributed Ledger Technology (DLT) Log evidence in
accordance with an exemplary embodiment of the present disclosure;
[0036]      Figure 4 is a schematic block diagram showing party identification in accordance
with an exemplary embodiment of the present disclosure;
[0037]      Figure 5 is a schematic Merklized Abstract Syntax Tree (MAST) parsing diagram in
accordance with an exemplary embodiment of the present disclosure; and
[0038]      Figure 6 is a schematic system diagram showing a Contract Authorization and
Distribution Framework (CADF) in accordance with an exemplary embodiment of the present
disclosure.
DETAILED DESCRIPTION
[0039]      The present inventive concept will be described more fully with reference to the
accompanying drawings, in which exemplary embodiments are shown. The present inventive
concept may, however, be embodied in many different forms and should not be construed as
being limited to the embodiments set forth herein. Like reference numerals may refer to like
elements throughout this description. As used herein, the word "model" is defined as at least
one bundle of agreement(s) or potential transaction(s), which, under certain governing rules
such as may be provided by a Master Contract, for example, might or might not have the
potential to represent a digitally-represented agreement or a legally binding contract.
[0040]      An exemplary embodiment system performs multilateral bookkeeping where
agreements evolve in consequence of authorized decisions and along previously agreed and
formalized rules, participants are guaranteed to learn of agreements that they are involved in,
                                                 8

contradicting agreements can be excluded through a shared append-only log of agreement
transitions, participants may have only partial insight to agreements that is sufficient for their
own authorization and records, the partial agreement store of participants remains without
contradiction to other participant's records and is validatable within the bounds of their visibility,
and an audit of agreement authorization and evolution can be automated.
[0041]      As shown in Figure 1, a Digital Asset Modeling Language (DAMLTM) agreement
evolution is indicated generally by the reference numeral 100.              A DAMLTM previous
agreement 110 is affected by a decision 112 to yield a DAMLTM current agreement 114.
[0042]      Turning to Figure 2, an exemplary DAMLTM Abstract Syntax Tree (AST) parsing
diagram is indicated generally by the reference numeral 200.              Here, an operator 210
references a stub 212 and another operator 220. The other operator 220 references a first
stub 222, a second stub 224, and a third stub 226. Although the exemplary AST is based on
DAMLTM, alternate embodiment ASTs may be based on alternate contract specification
languages (CSL).
[0043]      Turning now to Figure 3, a DAMLTM agreement evolution validated with Distributed
Ledger Technology (DLT) Log evidence is indicated generally by the reference numeral 300.
Here, a DLT blockchain Global Synchronization Log includes blocks 310, 312, 314, 316, 318,
320, 322, 324, and 326. A DAMLTM previous agreement 330 is affected by a decision 332 to
yield a DAMLTM agreement 334. The DAMLTM previous agreement 330 is affected by an
alternate decision 336 to yield a DAMLTM alternate agreement 338. Evidence from block 326
is employed to verify the previous agreement 330, and evidence from block 318 is employed to
verify the agreement 334. However, since there is no evidence on the DLT blockchain Log to
verify the alternate agreement 338, the alternate agreement 338 is invalid.
[0044]      As shown in Figure 4, a party identification workflow is indicated generally by the
reference numeral 400.      Here, in function block 410, a log writer derives a token from the
identity of Party A and the log writer's secret key. In function block 420, a Party A derives a
token from the identity of the log writer and Party A's secret key. In input block 430, evidence
of an agreement involving Party A is received with a notification token. The function block 432
may perform optional processing and refer to a function block 434. The function block 434
determines the identity of Party A, and refers to block 436.         The function block 436 may
                                                 9

perform optional processing and refer to a function block 438. The function block 438, in turn,
determines the identity of the log writer.
[0045]      Turning to Figure 5, a Merklized Abstract Syntax Tree (MAST) DAMLTM parsing
diagram is indicated generally by the reference numeral 500.         Here, a Merkle hash 540
references another Merkle hash 542 and an operator 520. The operator 520 references a first
stub 522, a second stub 524, and a third stub 526.
[0046]      Turning now to Figure 6, a Contract Authorization and Distribution Framework
(CADF) interconnected system is indicated generally by the reference numeral 600. Here, a
Global Synchronization Log 650, based on an exemplary Digital Ledger Technology (DLT)
blockchain, is connected to each of a first CADF unit 660 and a second CADF unit 670. The
first and second CADF units communicate using agreements written in DAMLTM that may be
translated to AST or MAST. The CADF system may authorize, store and request agreements
from another CADF system acting in behalf of another party. The first CADF 660, in turn, is
connected to the information technology (IT) systems 680 of Party A, while the second CADF
670, in turn, is connected to the IT systems 690 of Party B.
[0047]      The Digital Asset Modeling Language (DAMLTM)           is an expressive language
enabling financial institutions to model and execute agreements with certainty and finality. The
Global Synchronization Log based on Distributed Ledger Technology (DLT) is a shared,
replicated ledger, such as but not limited to a blockchain, with a synchronizing mechanism
known as a "consensus algorithm".         A Contract Authorization and Distribution Framework
(CADF) supports or includes a service to selectively disclose contracts to parties involved and
collect their authorizations for decisions.
[0048]      The presently disclosed Digital Asset Platform supports roles with different abilities
to enter into and/or review agreements, or technically support the security of the platform.
Unique design decisions while configuring DAMLTM, DLT Log, and/or CADF provide powerful
tools to streamline and execute contractual workflows between and within financial institutions.
[0049]      DAMLTM       code models an agreement between parties as a model typically
eventually referencing further DAMLTM models, which each evolve through a decision by a
party into a new model.      The new model might involve other parties to or into the contract,
might offer new decision choices, or might even be the same as the previous model. Unique
properties of the DAMLTM language particularly suited for such purposes include: 1) A DAML
                                                10

model     enumerates all possible current choices of the parties and their respective
consequences. 2) A decision evolves a DAML model into a new DAML model in finite steps
after which the new DAML model awaits new decisions to evolve further. 3) A DAML model
can be analyzed, to deduce: a) Current parties and their available choices; and b) The set of
parties who would become involved in the new contract if a current party would decide for any
of its respective current choices. 4) DAML allows for extracting fractions of the model such that
those fractions are also valid DAML models on their own, but potentially with a lesser number
of involved parties.
[0050]      While DAML is human readable and editable, it can be converted into and from a
well-defined and unique technical representation called an Abstract Syntax Tree (AST), as
shown in Figure 2. DAML allows for Operators that might combine Stubs or further Operators.
An Operator might represent a decision option and its sub-tree might define the effect of the
decision.    A Stub might be replaced with a model, again represented as an AST, in
consequence of a decision.
[0051]      A reliable bookkeeping of current agreements is used to avoid contradicting
agreements being considered simultaneously valid by any party.                 Distributed Ledger
Technology (DLT) presents an alternative to third-party and bilateral bookkeeping. Its primary
advantages lie in scalability if compared with bilateral bookkeeping, and lie in attack resilience
if compared to third-party bookkeeping. Distributed Ledger Technology introduces multilateral
bookkeeping whereby members of the network cooperate to create a reliable shared
infrastructure that decides on the order of agreements.       Once the order of agreements is
definite, contradicting agreements may be resolved by considering only the earlier agreement
valid. The DLT Global Synchronization Log is an append-only log of evidence for agreement
evolutions. The DLT Log data structure features sophisticated integrity proofs based on digital
signatures and cryptographic hashes.        Members of the DLT Log network can prove to
themselves through execution of a consensus algorithm that their copy of the log matches
those of the majority of network participants. A benefit of DLT for contractual parties is that if
the parties decide that the DLT Log shall include all contracts, it can identify the complete set
of current contracts while automatically excluding alternatives.
[0052]      When representing the complete set of current contracts, the DLT Log also acts as
a publication channel to announce new contracts to the parties involved.             Notification of
                                                11

 involved parties is required for the validity of an agreement. The presently disclosed Digital
Asset Platform stores notification tokens into the evidence of the new model. Involved parties
may monitor for their tokens. To protect privacy of involved parties, the notification token is
calculated such that it is known to be linked to the party only by the writer of the log and the
 involved party.
 [0053]      The notification token is a function of a shared secret between the log writer and the
 notified party. Derivation of shared secrets is made possible by prior announcement of the
 identities of the log writer and the involved parties on the log. Identities are tied to public keys
for which the private key is kept secret by the actor behind the announced identity. The log
supports announcement and revocation of identities for regular key rolling or emergency
withdrawal after a security breach affecting the party.
 [0054]      A Contract Authorization and Distribution Framework (CADF) are used for decisions
that require proper authorization by the party who makes a choice.            The platform collects
digital signatures on business intent formalized using DAML derived ASTs into evidence
authorization.     Since the DAML might not be authored by the authorizer, it needs to be
delivered on demand by the author's network node. Delivery of the AST for signature might be
denied if the requestor is not entitled to see the contract, or replied with a partially blinded AST,
just sufficient to support the decision process of the authorizer.
 [0055]      The platform uses a Merklized Abstract Syntax Tree (MAST) for partial blinding of
an AST. Parts of an AST are substituted with the Merkle Hash of their respective sub-tree to
create a MAST. Merkle Hashes do not reveal anything about the information blinded. Merkle
 Hashes are computed such that the digital signature on the complete AST or on any of its
derived MAST is verifiable with knowledge of the AST or any of its derived MAST. As a result,
 parties will hold incomplete sets of copies of models just as they are entitled to see or are
 required to authorize. Their model storage resembles multilateral bookkeeping, but formalized
and properly authorized.
 [0056]      Once sufficient authorization is collected, the new agreement will be evidenced on
the DLT Log. The evidence does not disclose anything about the model's content, but is a
fingerprint compiled such that all involved parties are able to prove that the evidence is for a
 particular agreement.      The multilateral model store filtered by evidence on the DLT Log
completely and reliably defines the current set of agreements for all parties involved.
                                                   12

[0057]        The various network nodes connected to the shared infrastructure may have
different roles. A node may fulfill several roles.
[0058]        One role is that of a "ledger writer". A network node that records evidence into the
append-only log is a ledger writer. Although technically not necessary, it will most likely also
guarantee the contradiction-less recording of evidence and, as a consequence, have full
visibility into agreements it records, for which it will have full records in its CADF. The role of
the ledger writer might be shared by several nodes, such that a ledger write requires joint
authorization by them in desired scenarios.
[0059]        Another role is that of a "ledger reader". This is a network node that acts in behalf
of parties that might be involved in some agreements or for supervising authorities. The ledger
reader will watch out for notifications for its served parties on the DLT Log, and aggregate a
partial database of agreements through its CADF.
[0060]        Yet another role is that of an "auditor". The purpose of an Auditor is to keep a
check on the ledger writer by proving that agreement evolutions are properly executed and
authorized and that involved parties were notified and no contradicting agreements were
recorded. Similar to the ledger writer, an Auditor will have some visibility into agreements, but
in addition it will also have knowledge of shared secrets for many parties. A breach of protocol
by the Ledger Writer would be flagged by the Auditor and handled outside of the described
shared infrastructure. Since the Auditor's task is the execution of a checking algorithm that
needs no human discretion or oversight, the Auditor may be an autonomously executed
algorithm running within a secure computing environment.            Communication with the secure
environment may be encrypted, and it may be configured so no data may leave the secure
environment except for raising a flag on any failed rule validation the Auditor observes.
[0061]        By default, all parties to an agreement need to authorize it. The agreement might
supersede a previous one. An agreement is typically "eventful" in that it depends on at least
one external input or event, but is not required to be. The syntax and the interpretation of an
agreement are left entirely up to the parties to agree "off ledger". An exemplary embodiment
ledger records such off-ledger agreements, but does not attempt to interpret them.           Under
particular circumstances, such an agreement leading to an active agreement may meet the
requirements of a legally enforceable contract in a given jurisdiction if that was the intention of
the parties and their respective authorizations had legal standing. In general, the ledger does
                                                    13

 not care whether a given agreement is legally enforceable, and an exemplary embodiment
makes no distinction between a general agreement and one meeting the standards of a legally
enforceable contract. Where desired, the present inventive concept envisions that a master
contract may be used to give DAML agreements legal status as contracts in particular
jurisdictions.
 [0062]     All code, data structures and the like discussed above can be stored in non
transient computer readable storage media.           Functional steps described herein can be
accomplished by computer code executed on a processor. The various data manipulations
described above can be accomplished on stored data structures to create transformed data
structures that are processed by a computer processor in a different manner. The various
functions of the embodiments allow a computing system to operate in a new manner to
accomplish transactions and provide new advantages. The various flowchart steps can be
accomplished by software modules executed on a computer processor. Blocks illustrated in
the figures can represent data structures, such as databases storing records, which are
manipulated in the described manner to allow a computing system to operate on the data and
transform the data.
 [0063]     While the inventive concept has been described herein by way of example with
 respect to non-limiting exemplary embodiments;           other alternatives, modifications, and
variations will be apparent to those of ordinary skill in the pertinent art based on the teachings
disclosed herein. Accordingly, the scope of the appended claims is intended to include all
such alternatives, modifications and variations on the exemplary embodiments set forth herein,
as well as equivalents thereof that fall within the scope and spirit of the present disclosure.
                                                  14

        What is claimed is:
        1.     A computer-implemented method of manipulating data structures for distributed
multilateral bookkeeping comprising:
               receiving previously agreed and formalized rules to define agreement evolution
for one or more participants;
               receiving an authorized decision;
               evolving an agreement, wherein evolving the agreement is based on the
authorized decision and the agreed and formalized rules;
               calculating a shared secret between each participant to the agreement and a
ledger writer;
               determining a notification token to notify participants in the agreement of the
evolved agreement wherein the notification token is encrypted with the shared secret; and
               writing, with a ledger writer, the notification token in the shared append-only
ledger as evidence of notification of the evolved agreement.
        2.     The method of claim 1, further comprising:
               reading, with a ledger reader, notification token(s) on the shared append-only
ledger with the shared secret;
               detecting contradicting agreements; and
               excluding a contradicting agreement based on evidence from the notification
token on the shared append-only ledger.
        3.     The method of claim 1 or 2, further comprising:
               providing participants partial insight to agreements through a partial agreement
store sufficient for their own authorization and records,
               wherein the evolved agreement can be validated with the participants partial
insight and the notification token of the evolved agreement.
        4.     The method of any one of the preceding claims wherein the append-only ledger
comprises a blockchain.
                                                   15

       5.     The method of any one of the preceding claims wherein the notification token as
evidence indicative of an agreement or evolved agreement comprises a timestamp indicative
of recordation time of the notification token on the ledger.
       6.     The method of any one of the preceding claims, further comprising:
              auditing one or more evolutions of an agreement comprising:
                      - reading, with a ledger reader, notification token(s) on the shared append
only ledger with the shared secret; and
                      - determining, based on evidence from the notification token(s), that an
evolution of an agreement from a first transaction dataset to a second transaction dataset was
properly authorized and properly executed, and that all participants were notified of the
changes pertinent to them.
       7.     A system, comprising a plurality of computers, for distributed multilateral
bookkeeping comprising:
              one or more processors to:
                      - receive previously agreed and formalized rules to define agreement
evolution for one or more participants;
                      - receive an authorized decision;
                      - evolve an agreement, wherein evolving the agreement is based on the
authorized decision and the agreed and formalized rules;
                      - calculate a shared secret between each participant and a ledger writer;
       - determine a notification token to notify participants in the agreement of the evolved
agreement, wherein the notification token is encrypted with the shared secret; and
              a ledger writer to write the notification token in a shared append-only ledger as
evidence of notification of the evolved agreement.
       8.     The system of claim 7, further comprising:
              - a ledger reader to read notification token(s) on the shared append-only ledger
with the shared secret;
                                                  16

               - an audit unit configured to:
                       - detect contradicting agreements; and
                       - exclude a contradicting agreement based on evidence from the
notification token on the shared append-only ledger.
        9.     The system of any one of claims 7 to 8, wherein the shared append-only ledger
is accessible to nodes associated with the participants and wherein the shared append-only
ledger:
               provides participants partial insight to agreements through a partial agreement
store sufficient for their own authorization and records,
               wherein the evolved agreement can be validated with the participants partial
insight and the notification token of the evolved agreement.
        10.    The system of any one of claims 7 to 9 wherein the append-only ledger
comprises a blockchain.
        11.    The system of any one of claims 7 to 10 wherein the notification token as
evidence indicative of an agreement or evolved agreement comprises a timestamp indicative
of recordation time of the notification token on the ledger.
        12.    The system of any one of claims 7 to 11, further comprising:
                       - an auditor unit to audit one or more evolutions of an agreement, the
auditor unit is configured to:
                       read notification token(s) on the shared append-only ledger with the
shared secret; and
                       determine, based on evidence from the notification token(s), that an
evolution of an agreement from a first transaction dataset to a second transaction dataset was
properly authorized and properly executed, and that all participants were notified of the
changes pertinent to them.
                                                   17

        13.    A program storage device tangibly embodying program steps executable by a
computer for manipulating data structures in distributed multilateral bookkeeping, the program
steps comprising:
               receiving previously agreed and formalized rules to define agreement evolution
for one or more participants;
               receiving an authorized decision;
               evolving an agreement, wherein evolving the agreement is based on the
authorized decision and the agreed and formalized rules;
               calculating a shared secret between each participant to the agreement and a
ledger writer;
               determining a notification token to notify participants in the agreement of the
evolved agreement, wherein the notification token is encrypted with the shared secret; and
               writing, with a ledger writer, the notification token in the shared append-only
ledger as evidence of notification of the evolved agreement.
        14.    The device of claim 13, the steps further comprising:
               reading, with a ledger reader, notification token(s) on the shared append-only
ledger with the shared secret;
               detecting contradicting agreements; and
               excluding a contradicting agreement based on evidence from the notification
token on the shared append-only ledger.
        15.    The device of claim 13 or 14, the steps further comprising:
               providing participants partial insight to agreements through a partial agreement
store sufficient for their own authorization and records,
               wherein the evolved agreement can be validated with the participants partial
insight and the notification token of the evolved agreement.
        16.    The device of any one of claims 13 to 15 wherein the append-only ledger
comprises a blockchain.
                                                   18

        17.   The device of any one of claims 13 to 16 wherein the notification token as
evidence indicative of an agreement or evolved agreement comprises a timestamp indicative
of recordation time of the notification token on the ledger.
        18.   The device of any one of claims 13 to 17, the steps further comprising:
       auditing one or more evolutions of an agreement comprising:
                     reading, with a ledger reader, notification token(s) on the shared append
only ledger with the shared secret; and
                     determining, based on evidence from the notification token(s), that an
evolution of an agreement from a first transaction dataset to a second transaction dataset was
properly authorized and properly executed, and that all participants were notified of the
changes pertinent to them.
                                                 19

<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
