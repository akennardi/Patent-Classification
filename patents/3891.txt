A FORMAL METHOD OF VERIFICATION AND PERFORMANCE
ANALYSIS FOR HIGHLY RELIABLE COMMUNICATION SYSTEM
Abstract
      There is a formal method of verification and performance analysis of highly reliable
communication system which has five steps. The invention is a formal method of verification and
analysis of communication system based on the combination of model checking and theorem
proving. Firstly, based on the method of assumption guarantees, we can establish the
environmental state machine, build the hierarchical modeling for the design of the network
communication system, and verify the key attributes by the formal method. Secondly, we made a
design to achieve high-level logical formalization of statistical characteristics of random variables
for the protocol transmission process and the formal modeling method of high-level logic of the
properties. Thirdly, with the high-level logic model and the related theorems established in HOL4,
automatically verification and quantifying the dynamic performance analysis of the formal
model-based is carried out. It has good practical value and broad application prospects in the field
of formal verification engineering.

                                                    1
A FORMAL METHOD OF VERIFICATION AND PERFORMANCE
ANALYSIS FOR HIGHLY RELIABLE COMMUNICATION SYSTEM
Related Application
     This application is a divisional application of Australian Patent Application No.
2013263777, filed on 28 November 2013 and incorporated herein by reference in its entirety.
Technical Field
     The invention relates to a formal method of verification and performance analysis for highly
reliable communication system. It is the integration method to achieve reliability verification
and performance analysis (Reliability, Maintainability and Supportability, referred to RMS) for
communication of Embeded system. Specifically it is an integration process building method
based on formal methods of verification and system quantitative performance analysis,
belonging to the field of application technology of the formal verification engineering.
Background
     Communication systems in system-on-chip of many critical applications usually have high
functional reliability, strict real-time and other requirements. There are lots of examples that the
failure of critical-safe system-on-chips lead to significant loss of life and property. Traditional
test method of system-on-chip is testing or fault simulation. The main limitation is that the data
sets that has been tested could not guaranteed the correctness of the other data set occurred in
actual operation. Thus it is difficult to find potential unreasonable design or subtle errors. One of
the key issues in the field of highly reliable on-chip computing research is how to ensure that the
system meets both the functional and the non-functional requirements to be given. Based on
formal methods, the correctness verification and performance analysis for the communication
process will be of great significance to ensure the correctness and reliability of on-chip
communication system. For the wide usage of data transmission, concurrent and distributed

                                                   2
process of system-on-chip, it is realized that the formal verification of the functional properties
of these applications usually adopt model checking method. But due to the low level of
abstraction of the model checking, only qualitative checking is allowed. Moreover, if the model
to be verified is abstracted improperly or communication protocol is getting complex, it will
easily lead to too many states to be verified at reasonable time; even occur the state explosion
problem. Currently, only the correctness of network communication system is verified with
formal methods; and the simulation model must be built if the quantitative analysis is
implemented.
Summary
     1, Objective: The purpose of the present invention is to provide a formal method of
verification and performance analysis of highly reliable communication system, it is a formal
method of verification and analysis of communication system based on the combination of
model checking and theorem proving. Firstly, based on the method of assumption guarantees,
we can establish the environmental state machine, build the hierarchical modeling for the design
of the network communication system, verify the key attributes by the formal method. Secondly,
we made a design to achieve high-level logical formalization of statistical characteristics of
random variables for the protocol transmission process and the formal modeling method of
high-level logic of the properties. Thirdly, with the high-level logic model and the related
theorems established in HOL4, automatically verification and quantifying the dynamic
performance analysis of the formal model-based is carried out.
     2, Technical Solutions: In order to achieve the above object, the invention is a solution of
formal methods for verification and performance analysis of highly reliable communication
system, the method steps are as follows:
     Step one: Analyze the SOC function to achieve the structure of the communication system
and extract key functional modules; decompose the modules and set up formal model. Combine
high-level logic theorem proving with symbolic model checking and realize a combination of
formal verification.

                                                  3
     Step two: Achieve formal verification of the interface attributes between the modules, I / 0
ports and physical layer functions by using model checking method. Based on symbolic model
checking platform, using model checking, we can hierarchically achieve the validation of the
properties of the interface between the models, I / 0 ports and physical layer functions.
     Step three: As for the case that complex functional modules may lead to too many states,
hierarchical abstraction is adopted, and, we establish the environmental state machine model and
adapt the combined verification strategy by Assumption-Guaranteed theory.
     Step four: Achieve the logical and functional validation of data communication protocol and
the parallel application process using theorem proving. Based on high-level logic, realize the
formal expression of temporal properties and random behavior for system-on-chip.
     Step five: By analyzing logical analysis expression of system, extract the expression
functions of mathematical logic of system processes and achieve the verification of statistical
properties of dynamic quantitative performance analysis for the object process. As described in
step one above that is "extract key functional modules; decompose the authentication module
and model it. Combine high-level logic theorem proving and symbolic model checking, and
realize a combination of formal verification"; its specific implementation process is illustrated as
follows: extract some modules such as sending, receiving, link management, error control and
flow control in the communication system and so on. Divide the design into verified modules
and extract validation goals and sub-goals by following the protocol design specifications.
Abstract independent functional modules as components to be verified independently, then
model the interfaces between low coupling modules abstractly and describe states of them;
Establish a sending / receiving controller state machine model and a formal model of the system
design, then verify them by model checking. On HOL4 platform, establish high-level logic
models of the processes including data transfers protocol, parallel distributed components by
using the method of theorem proving to verify them.
     In step three above, namely, "adapt the method of hierarchical abstraction, based on the
Assumption-Guaranteed theory; establish the environmental state machine model and adapt the
combined verification strategy". Its specific implementation process is illustrated as follows:

                                                  4
As for the problem that verifying complex functional attributes of the plurality of modules
coupled in cascade will generate excessive states, environmental state machine is abstracted and
the entire system is verified hierarchically by the method of Assumption-Guaranteed reasoning.
The process of Assumption-Guaranteed reasoning is represented as follows:
     If the two subsystems Si, S2 follow: (1) SI satisfy the property P1 (2) when the
environment of S2 satisfies the property P1, S2 satisfies property P2. Then the combination of
the subsystems SI and S2, Si || S2 satisfy property P2. The advantages of       this method is to
simply verify P1 by S2, then verify P2 by the environment of S2 abstracted from P1 without
creating a state machine of combination of SI and S2.Compared with Si, verifying P1 will lead
to greatly reduced state space, conducive to deal with large-scale circuit system. Through the
above steps, the invention provides a method of formal verification and performance analysis
for communication system, which combines two formal methods, model checking and theorem
proving. Meanwhile, the invention gives the general process method, which is corresponding to
the formal verification of the communication system.
     3, the Advantages and Efficacy: The main advantage of the invention is as follows: it
provides a formal verification method, which is used by a communication system of SOC at
different levels of abstraction, and achieves the performance analysis of concurrent property of
the system. Furthermore, it achieves an automatic verification technique, which is adopted by
more general SOC communication systems that the technique verifies those functions correctly
and reliably and facilitates the SOC designers to find the vulnerabilities or logical errors in the
early stage of system design.
Description of figures
     Figure 1: a whole diagram which realizes formal verification and analysis of
communication system based on the combination of model checking and theorem proving.
     Figure 2: a flow diagram of the invention.
     Figure 3: an implementation process template of model checking for the typical SOC
(system on Chip).

                                                  5
     Figure 4: a process template of high-level logic theorem proving for the typical SOC
system.
     Figure 5: a state transition diagram of transmission control module.
Detailed Description
     To get a clearer understanding of the characteristics and advantages of the invention, we can
combine with the drawings and describe in detail as follows: Figure 1 depicts the overall
architecture of the present invention.
     When SOC designers verify the correctness of behaviors and functions for on-chip
communication system to be designed or implemented by them, a formal verification method of
the present invention can be achieved to verify properties of system at different levels of
abstraction, and to realize performance analysis based on the establishment of a formal model:
Shown in Figure 2, the invention is a formal verification method for highly reliable
communication system to test and analyze system performance, their specific implementation
steps are:
     Step one: analyze the design of system and decompose validation. As is shown in Figure 2,
according to the system functions and achievement characteristics, decompose the task of
verification.
     (1) Analyze attributes, functional descriptions and its implementations of key modules or
processes and extract goals and sub-goals verified.
     (2) Divide the system function into verification modules and check the attributes. Abstract
independent functional modules and make them to be verified independently. Model the
interfaces between low coupling modules abstractly, and then describe states of them,
establishing abstract state machine.
     (3) In HOL4 platform, high-level logic models of the processes including data transfers
protocol, parallel distributed components are verified by using theorem proving.
     (4) For more independent components and interfaces that are between low coupling
modules, they are intended to be verified them by model checking.

                                                   6
     Step two: Achieve formal verification of the interface attributes between the modules, I / 0
ports and physical layer functions by using model checking. Based on symbolic model checking
platform, using model checking, we can hierarchically achieve the validation of the properties
for the interface between the models, I / 0 ports and physical layer functions. Model checking
process includes three processes: modeling, formal description of the properties and automatic
verification. As is shown in Figure 3, abstract and formally express implementations of the
object module of the system to be verified and create 5-tuple Kripke structure to represent finite
state space of system; Describe attributes of system expectations by computation tree logic
(CTL), this process needs to be described accurately and avoided ambiguity. Use symbolic
model checking tool, SMV (Symbolic Modeling Verifier), automatically and exhaustively check
whether the desired properties is true in the state space or not. If that is true, the design
implementations meet the expectations of the properties. If not, the counter-example will be
given, and based on the simulation test, we can locate the error and correct it. This can be a
revalidation cycle, validation-*error analysis and model modifications -> error message.
     For example, in Figure 5, under the reset condition, the transmitter is in waiting state. (1) If
the TickIN signal (request sending time code) from the host system is high, and has been sent
to the ESC signal (i.e. ESCGoneinternal signal is high), the sender will reach the state of
locking time code (in this state Provide_ Time Code is set to 1, and be transmitted to sending
register sub-module), then unconditionally reach the state of sending time code.
     (2) If Send FCT (from the control module) is set to 1 and EightMore = 1 (the receiver has
more than eight spaces to store data), and ESC Gone internal = 0 (if ESCGone internal = 1,
then ESC + FCT is a null character), then the transmitter will reach the locking flow control flag
state (in this state Provide_ FCT is set to 1, and be transmitted to sending register sub-module),
then unconditionally reach the state of sending regular character state.
     (3) If SendNULL (from the control module) is set to 1 and ESCGoneinternal = 1, then
the transmitter will reach the locking flow control flag state (in this state, Provide_ FCT is set to
1, and may be transmitted to the sending register sub-modules).
     (4) If Send All (from the control module) is set to 1 and NoCredit = 0, then the transmitter
will reach the locked flow control flag state (in this state, Provide ESC is set to 1, and may be

                                                    7
transmitted to the sending register sub-module).
     (5) If SendEEP = 1, then transmitter will arrive the state of locking the error packet ending
flag (in this state, Provide_ EEP is set to 1,and be transmitted to the sending register
sub-module).
     (6) If SendEOP = 1, then the transmitter will reach the state of locking the correct packet
ending flag (in this state, Provide EOP is set to 1, and may be transmitted to the sending
register sub-modules).
     (7) If Send_NCharFlag = 1, then the transmitter will reach the state of locking regular
character state (in this state, Provide_ NChar is set to 1, and may be transmitted to the sending
register sub-modules).
     In diagram, some main meanings of the input variables:
                    Variable name                Description
                         Clock                   Clock signal
                         NoCredit          If NoCredit = 0, then the transmitter is
                                           allowed to send a constant character
                         SendALL           The signal represents that transmitter is
                                           allowed to send any type of character
                         SendNULL          The signal represents that transmitter is
                                           allowed to send empty character
                         SendFCT           The signal represents that transmitter is
                                           allowed to send flow control flag
                         TXReset           The signal represents that transmitter is
                                           in the reset state
                    TXClockenable          IfTX_Clockenable=1, transmitter is
                                           allowed to send a corresponding
                                           character information
                         TickIN                  The signal that TickIN is set to 1
                                           indicates time code is allowed to be
                                           sent.

                                                  8
                  ESCGoneinternal             Indicates whether ESC has been
                                         sent or not.
     1, Protocol specifications must meet mutual exclusion, because of the priority problem, the
time code, constant characters and flow control flag aren't sent simultaneously.
Property 1:assert G~(!TXReset & ProvideTimeCode & ProvideNChar & Provide_FCT);
    2, Priority relationship exists between two characters to be sent, it is necessary to verify the
problem of priority, and property 2 shows when the time code will be sent with the FCT, time
code will be sent firstly.
    Property2: SPEC AG (!TXReset & TXClockEnable & (TickIN & ESCGone internal)
& (SendFCT & EightMore          & !ESCGone internal)-> AF ProvideTimeCode);
    3, According to the protocol specification, the properties to be verified mainly involve that
when the conditions are satisfied; whether each state in the state transition is able to enter the
corresponding state and whether output signal in the corresponding state is compliance with the
protocol specification requirements. According to the requirements, seven-branch temporal logic
formulas nature can be extracted.
     Property3: SPEC AG (AG SendNCharFlag -> AF presentstate= 1 & AF present state=
2 & AF ProvideNChar & AF NCharOnTrip & AF DCRegRead);
     Property4: SPEC AG (AG ESCGone internal -> AF present state= 3 & AF
presentstate= 4 & AF ProvideTimeCode );
     Property: SPEC AG (AG SendFCT-> AF presentstate= 5 & AF presentstate= 9 & AF
presentstate= 10 & AF ProvideFCT );
     Property6: SPEC AG (AG SendEOP -> AF present state= 6 & AF presentstate= 9 & AF
presentstate= 10 & AF ProvideEOP & AF DCRegRead & AF NCharOnTrip);
     Property7: SPEC AG (AG SendEEP -> AF presentstate= 7 & AF presentstate= 9 & AF
presentstate= 10 & AF ProvideEOP & AF DCRegRead & AF NCharOnTrip);
     Property8: SPEC AG (AG SendNULL -> AF presentstate= 8 & AF present state= 9 &
AF presentstate= 10 & AF ProvideESC);
    The above part of the formulas Property 3 to Property 8 mainly verify that when sending
request enters the sending control module, whether the control module will be enter the
corresponding state and in the state, the corresponding control signal is output or not. Then after

                                                    9
entering these states whether the control module is able to go back to the initial state of reset.
      Property9: SPEC AG (AG(!ESCGoneintemal & SendFCT & EightMore &
presentstate= 5 ) -> AF EightMoreAcknowledge);
     The branching logical formula Property 9 expresses that receiving buffer of Host A has
space to receive data. When a flow control character FCT is request to send to the transmission
side host B, the transmission control module of host A will generate a confirmation control code
which can receive extra eight constant characters and sends them to the register of transmitter,
eventually sends a FCT identifier to the host.
     Step three: after local properties of the various modules are verified, we need to verified
global properties over modules. As for the problem that verifying complex functional attributes
of the plurality of modules coupled in cascade will generate excessive states, we abstract and
establish environmental state machine and communicate the object to be verified with the state
machine by the method of Assumption-Guaranteed reasoning. For example, we can abstract the
transmission / receiver cache into the memory interface of the data characters. In the connected
state, the data output of the transmitter and filtering signals should conform to the DS coding. If
the values of two bits continuous of the data signal are same, the state of the filtered signal is
changing when transmitting the next bit; otherwise the filtered signals keep unchanged during
the two-bits time. This property is established on the premise that the flow control signal
ProvideFCT is true and this is controlled by controller. Therefore, increasing a relevant
environmental assumption P1, in the connected state, either the link protection or flow control
tag is true, so as to ensure that in this state ProvideFCT is true. That controller N satisfies
property P1 is verified, and then the transmitter module is embedded in the environment
satisfying the above assumption, we can detect the correctness of this property by model
checking, avoiding the problem of states explosion.
     Step Four: theorem proving deduces the properties of the system based on the axioms of
formal logical system. It can rely on structured induction techniques to prove in the infinite
domain, and deal directly with infinite state space, so that it can greatly reduce the number of

                                                    10
states analyzed by a model checker. Higher order logic theorem prover HOL4 has features of
strong ability to express and type polymorphism, and also has the fundamental theorem library
of embedding ML function. Attribute to HOL4 we can verify the divided modules in the first
step above. The basic process is shown in Figure 4, the formal model to be verified is input as an
object form. The model in HOL divide tasks of sub-totals interactively, proof checking system in
HOL4 will automatically check the correctness of the certification processes for each sub-task,
In this process, new theorems and descriptions that we will need must be established in a formal
model and we add them into HOL4.Theorems added to HOL4 is reusable, so it is very
convenient for reusability of theorems in verification tools and modular formal verification. The
solution intends to formally describe statistical properties such as the variance of discrete
random variables. Firstly we need establish a high order logic formal model and add it to HOL4
and also complete the proof of variance attributes needed by quantitative descriptions and
performance analysis of follow-up random properties, adding in HOL4 as a theorem.
      We can establish transmission protocol logic models in HOL4 and verify them based on
reasoning.
      1)   Defined data types respectively for the transmission of data information, control
           information, the transmission time and the number of packets in HOL4;
      2)   Establish high-level logical predicate (function) expressions for both sending and
           receiving process of channel and communication;
      Step Five: In HOL4, formally express the initial conditions and the constraints of the
process, and represent them into disjunctive expressions with the predicate function in the fourth
step. The transmission protocol is that we can determine whether the data is transmitted
correctly, by checking whether the time from sending packets to receiving the confirmation
information is within the expected range, and use the mechanism of error and retransmission for
correction. If the probability of error is p, the number of channel retransmissions is exponential
distribution, and then the data transmission delay can be expressed as:
                                    D~tr+dtran+dprog+(tr+ttimer)(G( .p)-1)
t, :time of re-transmitting data;
ttimer:time from sender transmitting the data packets completely to the timeout

                                                     11
dtran: time of transmitting packets completely required
dprog: signal propagation delay between nodes
      If Gx above obeys Gaussian distribution, the probability of random variable to be sent
successfully is x. The transmission delay mean of a packet can be expressed as:
                                     ((tr+ttimer)p/(1 -p))+ tr+dtran+dprog:
      extract functions from logical expression of the protocol delay by using the random
variables and the statistical properties of the theorem in HOL4, and then achieve performance
analysis.

                                                 12
CLAIMS
1.   A formal method of verification and performance analysis of highly reliable communication
system, its characteristic depends on the method steps, as follows:
      Step one: Analyze the SOC function to achieve the structure of the communication system
and extract key functional modules; decompose the modules and set up formal model. Combine
high-level logic theorem proving with symbolic model checking and realize a combination of
formal verification.
      Step two: Achieve formal verification of the interface attributes between the modules, 11O
ports and physical layer functions by using model checking method. Based on symbolic model
checking platform, using model checking, we can hierarchically achieve the validation of the
properties of the interface between the models, I/O ports and physical layer functions.
      Step three: As for the case that complex functional modules may lead to too many states,
hierarchical abstraction is adopted, and we establish the environmental state machine model and
adapt the combined verification strategy by Assumption-Guaranteed theory.
      Step four: Achieve the logical and functional validation of data communication protocol
and the parallel application process using theorem proving. Based on high-level logic, realize
the formal expression of temporal properties and random behavior for system-on-chip.
      Step five: By analyzing logical analysis expression of system, extract the expression
functions of mathematical logic of system processes and achieve the verification of statistical
properties of dynamic quantitative performance analysis for the object process.
2.   According to patent claim 1, the characteristic of a formal method of verification and
performance analysis of highly reliable communication system is that as described in step one,
extract key functional modules; Decompose the authentication module and model it. Combine
high-level logic theorem proving and symbolic model checking, and realize a combination of
formal verification; its specific implementation process is illustrated as follows: extract some
modules such as sending, receiving, link management, error control and flow control in the
communication system and so on. Divide the design into verified modules and extract validation
goals and sub-goals by following the protocol design specifications. Abstract independent

                                                   13
functional modules as components to be verified independently, then model the interfaces
between low coupling modules abstractly and describe states of them; Establish a sending /
receiving controller state machine model and a formal model of the system design, then verify
them by model checking. On HOL4 platform, establish high-level logic models of the processes
including data transfers protocol, parallel distributed components by using the method of
theorem proving to verify them.
3.   According to patent claim 1, the characteristic of a formal method of verification and
performance analysis of highly reliable communication system is that in step three, "adapt the
method of hierarchical abstraction, based on the Assumption-Guaranteed theory; establish the
environmental state machine model and adapt the combined verification strategy". Its specific
implementation process is illustrated as follows: As for the problem that verifying complex
functional attributes of the plurality of modules coupled in cascade will generate excessive states,
environmental state machine is abstracted and the entire system is verified hierarchically by the
method of Assumption-Guaranteed reasoning. The process of Assumption-Guaranteed reasoning
is represented as follows:
      If the two subsystems Si, S2 follow: (1) SI satisfies the property P1 (2) when the
environment of S2 satisfies the property P1, S2 satisfies property P2. Then the combination of
the subsystems SI and S2, Si || S2 satisfy property P2. The advantages of this method is to
simply verify P1 by S2, then verify P2 by the environment of S2 abstracted from P1 without
creating a state machine of combination of SI and S2.Compared with Si, verifying P1 will
greatly reduce the state space, conducive to deal with large-scale circuit system.
                                    Capital Normal University
                   Patent Attorneys for the Applicant/Nominated Person
                                    SPRUSON & FERGUSON

<removed-apn> <removed-date>
                                                                                                     2/5
<removed-date>
                                                                                                                              Communication
                                                                        Communications system                                  system design
                                                                           design analysis                                     specifications
<removed-apn>
                                                                                          Verification decomposition
                                                                                          determine verification goals
                                                                                                 and sub-goals
                                        Symbolic model
                                                                                                                                  Higher order logic proof
                                           checking
                                                                                                                                                                     formal modeling of
                              The module local                        Coupling module                                                   high-level logical          statistical properties
                                 properties                           global properties                               proof strategy   model ofconcurrent              of the random
                                verification                             verification                                                communication process                 variables
                                   state machine              environmental      state machine       Temporal
                 Temporal
                                                              state machine         model of          logical         Fundam                     theorem of
                  logical             model of                                                                                                                  Add higher order logic
               expression of                                 model of module     module to be      expression of        ental      Higher order statistical
                                   module to be                                                                                                               theorems theorem proof of
              target attributes                                to be tested          tested       target attributes    Theore     logic theorem properties of
                                       tested                                                                           m of                                               Statistical
                                                                                                                                      prover     the random
                                                                                                                      libraries                                            properties
                                                                                                                                                  variables
                      Symbolic model               counter example           Symbolic model checking tool
                   checking tool platform          Tracing analysis                   platform
                                                                                                                                          the logical function
                                              no                        no                                                                      extraction
                              correct                                                   correct                                               performance
                                                                                                                                               analysis of
                                                                                                                                          statistical properties
                                                                               Formal verification and performance analysis of
                                                                                           communication system

                                                       3/5
<removed-date>
<removed-apn>
                                                              System Design
               Requirements Description
                                                                  <U+2702> Code
                 Data control flow graph                     implementation
                            Abstract
              Attributes abstracted                           Formal                   Establish an
                                                             Modeling                    abstract
                                                                                       environment
                         Formalization                                        Environmental
                                                    Formal model
                  Property                                                    state machine
                specifications
               (Temporal logic)
                                           Symbolic model
                                             verification
                                                               counter
                          Correct                    Error +                    Error tracking
                                                               example

                                           4/5
<removed-date>
                 Prove the Prove the             Sub-target
<removed-apn>
              target property command            attributes
                     Sub-target organization and
                     constitution determine proof
                                strategy
                                                                 Higher order logic
                                                                 axioms Gallery +
                                                                  Theorem library
                     Task                 Prove
                     input              conditions
                    Automatic proof system for
                        higher order logic
                                                    Add new theorems
                         Complete the proof
                            of target

                                                                                                   5/5
<removed-date>
<removed-apn>
                                                                                                            Tick_IN=0              locking escape
                                                                                                          (Send_FCT=0|               characters
                                                                                                           EightMore=0|                               TX_C
                                                                                                                                                           lockE
                                                                                                       ESC_Gone_internal=1)                                     nable
                                                                                                                                                                        ).(!TX
                                                                                                         (Send_NULL=0|                                                        _Res
                                                                                                                                                                                  et
                                                                                                       ESC_Gone_internal=0)
                                                                                                           (Send_All =0|
                                                                                                            NoCredit=1)           TX_Reset
                                                  Sending                                                 Send_NULL=1
              (TX_ClockEnable).(!TX_Reset)        constant
                                                                                                                                 Tick_IN=0
                                                 characters                                                                    (Send_FCT=0|
                                                                (!TX_CargoCounter).(TX_Reset) +
                                                        (TX_CargoCounter).(!TX_ClockEnable).(TX_Reset) +                        EightMore=0|     end marker (TX_ClockEnable).(!TX_Reset)
                 Locking                                      (TX_CargoCounter).(TX_ClockEnable)                            ESC_Gone_internal=1) of locking                                                sending the
                                                                                                                              (Send_NULL=0| error packet                                                   character 1
                 constant
                                                                                                                            ESC_Gone_internal=0)
                characters                           (TX_Reset)                                                                (Send_All =1|
                                                                                                                                NoCredit=0)
                            Tick_IN=0                                                                                           Send_EEP=1
                          (Send_FCT=0|                                         Reset                                                                                                                       le)
                           EightMore=0|                                                                          waiting                                                                               nab
                                                                                                                                                                                                     kE )
                                                                                                                  state                                                                           loc set
                       ESC_Gone_internal=1)
                                                                                                                                                                                              X _C _Re
                         (Send_NULL=0|                                                                                                                                                      (T .(!TX
                       ESC_Gone_internal=0)                                                                                     (!TX_ClockEnable).(TX_Reset)
                           (Send_All =1|                                                                                             &(TX_ClockEnable)           sending the
                            NoCredit=0)                                                                                                                           character2
                        Send_Nchar_Flag=1     (!TX_CargoCounter).(TX_Reset) +                                                      Tick_IN=0                                                                       es
                                                                                                                                                                                                                        )
                                                                                                                                                                                                                       et
                                       (TX_CargoCounter).(!TX_ClockEnable).(TX_Reset) +                                          (Send_FCT=0|
                                                                                                                                                                                                                  _R
                                            (TX_CargoCounter).(TX_ClockEnable)                                                                                                                               TX
                                                                                                                                 EightMore=0|                                                              .(!
                                                                                (ESC
                                                                                                                                                                                                       e)
                                                                                                                              ESC_Gone_internal=1)                                                    bl
                                                                                     _
                                                                              .(TX_ Gone_inte
                                                                                                                                                                                                  En
                                                                                                                                (Send_NULL=0|                                                    ck
                                                                                                                                                                                                     a
                                                                                                                              ESC_Gone_internal=0)                                           lo
                                                                                                                                                                                            _C
                                                                                    Clock      rn
                                                                                                                                 (Send_All =1|
                                                                                          Enab al).(Tick
                                                                                                                                                                                        X
                                                                                                                                                                                       (T                                    )
                                                                                                                                  NoCredit=0)           Locking end                                                          et
                                                                                                                                                                                                                            es
                                                                                                                                  Send_EOP=1                                                                            _R
                                                                                              le).(!     _
                                                                                                                                                          marker
                                                                                                     TX_R IN)
                                       Sending time                                                                       Tick_IN=0
                                                                                                                                                                                                                   TX
                                          code                                                                                                           of correct                                               .(!
                                                                                                                        (Send_FCT=0|                                                                             e)
                                                                                                                                                          package
                                                                                                         eset)
                                                                                                                                                                                                             bl
                                                                                                                         EightMore=0|                                                                      En
                                                                                                                                                                                                              a
                                                                                                                     ESC_Gone_internal=1)                                                              ck
                                                                                                                                                                                                      lo
                                                                                                                       (Send_NULL=1)                                                              _C
                                                                                                                                                                                                 X
                                                                                                                     ESC_Gone_internal=1)                                                    (T
                                             (TX_ClockEnable).(!TX_Reset)
                                                                                                                                                 control flag
                                                                               locking the                                                       of locking
                                                                                time code                                                           flow

