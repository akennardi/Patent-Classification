  ABSTRACT OF THE DISCLOSURE
  The disclosure describes methods or communication protocols that enable second-screen
  applications, such as smartphones, to discover and launch first-screen applications on first-screen
  devices, such as Internet enabled high definition televisions. Second-screen devices can search
5 local networks for the presence of discovery servers on first-screen devices. Well-known
  protocols such as RESTful HTTP services and Universal Plug and Play (UPnP) may be leveraged
  to implement the discovery servers. Once located, the discovery servers may assist
  communications and interactions between the first-screen and second-screen devices, allowing a
  specified application to be launched on the first-screen device and controlled from a local
0 application on the second-screen device. The specified application may be installed if not
  previously installed, and may also be hosted as a web application on a cloud server accessible
  outside of the local network, for example on the Internet.

                                                                                          P100/01i1
                                                                                     Regulation 3.2
                                        AUSTRALIA
                                      Patents Act 1990
                 COMPLETE SPECIFICATION
                      STANDARD PATENT
Invention Title:        Application discovery
The following statement is a full description of this invention, including the best method
of performing it known to us:

                                      APPLICATION DISCOVERY
   CROSS-REFERENCE TO RELATED APPLICATIONS; BENEFIT CLAIM
   [0001]      This application claims the benefit of provisional application 61/675,756, filed July 25,
 5 2012, provisional application 61/665,827, filed June 28, 2012, and US patent application
   13/827,720, filed March 14, 2013, the entire contents of which are hereby incorporated by
   reference for all purposes as if fully set forth herein.
   TECHNICAL FIELD
 0 [0002]      The present disclosure generally relates to techniques for discovering the presence of
   computer program applications in a network. The disclosure relates more specifically to
   application discovery techniques useful in coordinating first-screen audiovisual devices and
   second-screen computing devices.
 5 BACKGROUND
   [0003]      The approaches described in this section are approaches that could be pursued, but not
   necessarily approaches that have been previously conceived or pursued. Therefore, unless
   otherwise indicated, it should not be assumed that any of the approaches described in this section
   qualify as prior art merely by virtue of their inclusion in this section.
20 [0004]      Video-based entertainment systems in homes and commercial environments may
   include a variety of primary viewing systems such as televisions, digital video recorders, disc
   players, and set-top boxes that are compatible with cable or satellite television signaling systems.
   Such primary viewing systems often include complete special-purpose computers that are capable
   of hosting application programs relating to entertainment or other functions, and are usually
25 capable of driving or displaying a program on a large-screen display or display unit. In the same
   environments, the use of other special-purpose computing devices and general purpose computing
   devices such as smartphones, tablet computers, laptop computers, netbook computers, and other
                                                       2

   computers and workstations is commonplace. However, while certain protocols are available for
   discovering devices on a local network, such as SSDP and Bonjour/mDNS, in current technology
   it has been difficult for applications hosted on the computing devices to identify, obtain data from,
   and coordinate operations with applications that may run on the primary viewing systems. As
 5 another example, a laptop computer on a local network may have no way to identify and then cause
   launching, on the primary viewing system, a particular entertainment-oriented computer program
   application that is hosted on the primary viewing system. Consequently, in the past users typically
   have had to interact directly with the primary viewing system to identify, launch, use, and shut
   down the applications that are hosted on the primary viewing system.
 0
   BRIEF DESCRIPTION OF THE DRAWINGS
   [0005]      In the drawings:
   [0006]      FIG. 1A illustrates a computer system architecture that may be utilized to implement
   various embodiments.
 5 [0007]      FIG. 1B illustrates a method of discovering applications according to an embodiment.
   [0008]      FIG. 2 is a message sequence diagram that illustrates one implementation of the DIAL
   service discovery component.
   [0010]      FIG. 3 is an example of an M-SEARCH request.
   [0011]      FIG. 4 is an example of an M-SEARCH response.
20 [0012]      FIG. 5 is an example of a device description request.
   [0013]      FIG. 6 is an example of a device description response.
   [0014]      FIG. 7 is a message sequence diagram illustrating application launch.
   [0015]      FIG. 8 illustrates an example application launch request.
   [0016]      FIG. 9 illustrates an application launch response.
25 [0017]      FIG. 10 illustrates an Application Information Request.
   [0018]      FIG. 11 A illustrates a XML schema for an application information response.
   [0019]      FIG. 11 B illustrates an application information response.
                                                      3

   [0020]       FIG. 12 illustrates a computer system with which an embodiment may be implemented.
   DETAILED DESCRIPTION OF EXAMPLE EMBODIMENTS
   [0021]       In the following description, for the purposes of explanation, numerous specific details
   are set forth in order to provide a thorough understanding of the present invention. It will be
 5 apparent, however, that the present invention may be practiced without these specific details. In
   other instances, well-known structures and devices are shown in block diagram form in order to
   avoid unnecessarily obscuring the present invention.
   [0022]       1.0 TECHNICAL INTRODUCTION
   [0023]       In an embodiment, the disclosure describes methods or communication protocols that
 0 enable second-screen applications to discover and launch first-screen applications on first-screen
   devices. One goal of the disclosure is to enable consumer electronics device owners to enjoy
   seamless integration of smartphone and tablet computer applications as part of an
   audiovisual-oriented entertainment experience.
   [0024]       1.1 Terminology
 5 [0025]       In this disclosure, the following terms may have the following meanings:
   [0026]       First screen: a television, disc player, set-top box, game console, digital video recorder,
   or similar device primarily capable of playing or generating a visual display of an audiovisual
   program. A first screen device is often a primary viewing system in the user environment.
   [0027]       Second screen: a smartphone, tablet computer, laptop computer, netbook computer, or
20 other personal computing device. A second screen device is often a secondary viewing system but
   often has more powerful or generalized computing and input capabilities than the first screen
   device.
   [0028]       Discovery server: a computing device that hosts, executes or implements the server
   side of the protocols described herein. In one embodiment, the discovery server is a first screen
25 device.
                                                         4

   [0029]       Discovery client: a computing device that can discover and request to launch computer
   program applications that are located or hosted on a discovery server. In one embodiment, the
   discovery client is a second screen device.
   [0030]       For purposes of illustrating clear examples, certain sections of this disclosure refer to
 5 certain commercially available services such as Netflix and YouTube, and refer to certain
   commercially available computing devices such as iPhone smartphones and Android-based tablet
   computers. However, the specific services and devices identified in the disclosure are stated
   merely as examples and other embodiments may be implemented in connection with any other
   form of computing device or application.
 0 [0031]       2.0 SYSTEM ARCHITECTURE
   [0032]       FIG. 1A illustrates a computer system architecture that may be utilized to implement
   various embodiments. In an embodiment, a first screen device 102 and a second screen computing
   device 110 are coupled to a local network 114. For example, first screen device 102 may comprise
   a processor-equipped television, set-top box, game console, digital video recorder, disc player, or
 5 other element of consumer electronics that includes or is capable of driving a video display 108.
   First screen device 102 hosts and executes a first screen application 104 and a discovery server
   106. Any number of first screen applications 104 may be supported in various embodiments and a
   single first screen application is shown in FIG. 1A merely to illustrate a clear example. Examples
   of first screen applications include video players such as Netflix compatible players.
20 [0033]       Discovery server 106 comprises one or more computer programs that implement the
   functions that are further described herein for responding to and processing requests from the
   discovery client 112 to discover the availability of compatible applications in first screen devices.
   In an embodiment, discovery server 106 comprises a DIAL service discovery component 106A
   and a DIAL REST service component 106B configured to perform the functions that are described
25 further herein. DIAL, in this context, refers to Discovery and Launch, and indicates the general
   functions of certain operational units shown in FIG. 1A.
                                                      5

   [0034]      In general, DIAL service discovery component 106A responds to requests of discovery
   client 112 to discover the discovery server 106 and the DIAL REST service component 106B
   serves as an interface between application launch requests of the discovery client 112 and an
   application manager of the first screen device 102. In one embodiment, first screen device 102
 5 further comprises a Universal Plug and Play (UPnP) server 107, or alternatively an HTTP server,
   that is configured to provide access to information about first screen application 104 and other
   applications that are hosted at first screen device 102. In an embodiment, UPnP server 107 is
   configured, through means that are outside the scope of this disclosure, with a device description
   109 that indicates metadata of first screen device 102 including a list of available UPnP services.
 0 For example, device description 109 may include a "friendlyName" field to provide a name of
   "Smart HDTV XYZ-900" for first screen device 102. Additionally, an "Application-URL" header
   field may be provided in a HTTP response to a HTTP request for device description 109. This
   Application-URL may point to DIAL REST service component 106B of discovery server 106. By
   concatenating this Application-URL with a specific application name of interest, UPnP client
 5 devices such as second screen computing device 110 can query and control first screen application
   104 and zero or more other applications hosted at first screen device 102. For naming consistency,
   UPnP clients may utilize well-defined Application Names that are registered within a DIAL
   Registry, as discussed in Section 7.0 below. It should be noted that the applications accessible via
   the Application-URL are separate and distinct from the list of UPnP services provided in device
20 description 109.
   [0035]       Second screen computing device 110 may comprise any of a smartphone, tablet
   computer, laptop computer, netbook computer, or other computer or workstation. Second screen
   computing device 110 hosts or executes a discovery client 112 and a second screen app 113. The
   discovery client 112 implements the functions that are further described herein for initiating
25 discovery requests to discover the first screen device 102 or other video-oriented or
   entertainment-oriented devices that are coupled to the local network 114. Second screen app 113
   may comprise any kind of executable application that can benefit from or use data obtained from
                                                      6

   or provided to the first screen application 104. For example, second screen app 113 might provide
   a television program schedule, a media file manager, and/or an internet browser for accessing
   applications that are hosted on internet servers.
   [0036]      Local network 114 may comprise wired network links, a wireless networking router, or
 5 other elements of network infrastructure. In an embodiment, local network 114 is coupled to an
   access router 116, such as a cable modem, DSL modem, or other access equipment to a public
   network 118 or internetwork such as the global collection of internetworks known as the internet.
   Links of local network 114 to first screen device 102 and second screen computing device 110 may
   comprise wired links or wireless links; for example, access router 116 may represent the
 0 combination of a wireless local area network (WLAN) router and a cable modem, DSL modem, or
   other access equipment, and devices 102, 110 may have compatible wireless network interface
   cards.
   [0037]      In an embodiment, a discovery repository 120 is coupled to the network 118 and is
   accessible using networking protocols from the discovery server 106 and discovery client 112. In
 5 general the discovery repository 120 comprises a data store such as a relational database, flat file
   system or other data storage holding centralized information such as known names of widely
   available first screen applications 104 or second screen apps 113. The configuration and use of the
   discovery repository 120 is further described herein.
   [0038]      Broken lines in FIG. 1A illustrate virtual communications paths between the discovery
20 client 112 and other elements of FIG. 1A.
   [0039]      3.0 EXAMPLE USES
   [0040]      In various embodiments, different methods may be implemented for using the
   techniques herein for establishing communication between second screen devices and first screen
   applications in the general manner described in this section.
25 [0041]      FIG. lB illustrates a method of discovering applications according to an embodiment.
   At block 130, a discovery service client executing on a second screen device initiates a discovery
   request in a local network to which both the second screen device and one or more first screen
                                                     7

   devices are coupled. The discovery request specifies a multiscreen service so that listening servers
   that support multiscreen entertainment-oriented services can recognize and respond to the request.
   At block 132, the discovery service client receives a discovery response, from one of the first
   screen devices, identifying the name and location of a discovery server on the first screen device. If
 5 the first screen device supports SSDP or UPnP, then the response may come from an SSDP server
   or UPnP server at the first screen device; other embodiments may implement other servers at the
   first screen device to recognize and reply to discovery requests that indicate a multiscreen service
   or the equivalent. At this point, the discovery service client at the second screen device is aware
   that a compatible server is in the network and can be contacted to obtain further data about
 0 particular applications. As further described herein, the discovery server may be implemented
   using any of several technologies and protocols.
   [0042]       At block 134, the discovery service client requests the discovery server to provide
   location and, optionally, name information for one or more applications that are available at the
   first screen device. Block 134 may be accomplished using a two-step process that first identifies a
 5 location to call the DIAL REST API and then queries the DIAL REST API for application
   information. For example, the discovery service client may first send a HTTP request for a UPnP
   device description of the discovery server. The HTTP response includes the UPnP device
   description and also includes an Application-URL header field pointing to the DIAL REST API.
   Next, the Application-URL may be used to query name and/or location information for known
20 installed applications, organized as a structured document or another form of response. In some
   embodiments, the discovery service client is pre-configured with names of potentially installed
   applications and requests the discovery server to return information about installed applications of
   a particular name. Accordingly, the discovery service client can determine whether a specific
   application is installed at the first screen device by querying the discovery server, for example via
25 concatenation of the Application-URL with the specific application name. In certain embodiments,
   block 134 may be optionally omitted since the discovery service client can determine whether the
   specific application is installed based on an action in response to block 136.
                                                       8

   [0043]      At block 136, the discovery service client requests the discovery server to launch a
   specified application on the first screen device, optionally with one or more specified parameter
   values. In response, the discovery server may interact with an application manager of an operating
   system or other facility on the first screen device to cause launching the specified application. In
 5 this approach, the discovery service client is not required to be configured with information or
   code that functions to directly invoke or launch applications on the first screen device.
   Consequently, the first screen device may use any combination of processor, operating system, or
   other platform for managing applications without special configuration of the discovery service
   client or the second screen device or second screen apps, and yet the second screen device will be
 0 capable ultimately of launching or invoking applications on the first screen device.
   [0044]      Furthermore, as discussed below in Table 1, various actions may also be carried out in
   response to the launch request. For example, if the launch request causes a "404 Not Found"
   action, then the discovery service client may determine that the specific application is not installed.
   [0045]      At block 138, the discovery client provides data identifying the first screen application
 5 to a local app executing or hosted on the second screen device. At block 140, the first screen
   application and second screen app communicate and interact directly via the local network. The
   discovery client may be configured to perform such communications through URLs or other
   structured identifiers that can be passed to the first screen application through an intermediary
   service hosted on the first screen device, as further described herein. As a result, a second screen
20 app can efficiently communicate with a first screen application to coordinate operations, share
   data, or monitor functions or execution.
   [0046]      In various embodiments, the general methods of FIG. 1B may be implemented as a first
   screen service, a second screen service, or a cloud-based service in the following example
   approaches.
25 [0047]      3.1 First Screen Service
   [0048]      In one embodiment, a Netflix app running on an iPhone smartphone discovers a
   Netflix-enabled television, and then causes launching the Netflix app on the TV to enable a user to
                                                      9

   watch a movie. In this context, "Netflix-enabled television" refers to a television display device
   with computing capability that already has a Netflix app installed on it. Such an embodiment could
   involve the following general process:
   [0049]       (a) Netflix app on iPhone discovers discovery service on the networked TV
 5 [0050]       (b) Netflix app on iPhone uses the discovery service to request the networked TV to
   launch the Netflix app on the TV
   [0051]       (c) Netflix app on iPhone discovers Netflix app on TV
   [0052]       (d) Netflix app on iPhone and Netflix app on TV communicate to show the movie.
   [0053]       3.2 Second Screen Service
 0 [0054]       In one embodiment, a YouTube app on an Android tablet discovers a
   YouTube-enabled TV and then launches the YouTube app on the TV and plays video on the TV;
   after the video ends, the TV returns to the previously playing TV show. Such an embodiment could
   involve the following general process:
   [0055]       (a) YouTube app on tablet discovers the discovery service on the networked TV
 5 [0056]       (b) YouTube app on tablet uses the discovery service to ask the TV to launch the
   YouTube app, passing a network address (such as an IP address and port value) corresponding to
   the YouTube app on the tablet
   [0057]       (c) YouTube app on TV communicates with YouTube app on tablet to show the video,
   then exits back to the normal TV user interface.
20 [0058]       3.3 Cloud-Based Service
   [0059]       In one embodiment, a WebcamX app on an Android-based smartphone discovers a
   WebcamX-enabled TV and then launches the browser-based HTML5 WebcamX app on the TV to
   display a webcam stream. In this example, the WebcamX app is a fictitious example that is
   described for purposes of illustrating a workable, potential use of the techniques herein. Such an
25 embodiment could involve the following general process:
   [0060]       (a) WebcamX app on phone discovers discovery service on the networked TV
                                                     10

   [0061]      (b) WebcamX app on phone uses the discovery service to request the TV to launch an
   HTML5 -based browser starting with the URL for the WebcamX app, passing a unique token based
   on a random or pseudo-random number
   [0062]      (c) WebcamX app on phone communicates with WebcamX app on TV using a
 5 cloud-based WebcamX server, using the unique token to enable the server to correctly route traffic
   between the two apps.
   [0063]      4.0 OVERVIEW OF EXAMPLE DISCOVERY METHOD
   [0064]      For purposes of illustrating clear examples, certain sections of this disclosure use
   particular terms as shorthand, such as DIAL. However, other embodiments may implement
 0 functionally equivalent methods or mechanisms using different names, labels, or identifiers and
   therefore terms such as DIAL are provided merely as examples.
   [0065]      In one embodiment, the techniques herein may be implemented through a DIAL
   service discovery component 106A and a DIAL REST service component 106B. REST, in this
   context, refers to the Representational State Transfer style of software architecture for distributed
 5 systems. While the use of a REST service is described herein for purposes of describing a clear
   example, in other embodiments, SOAP or WSDL may be used. In one embodiment, the DIAL
   service discovery component enables a discovery client device to discover discovery servers on its
   local network segment and obtain access to the DIAL REST service on those devices.
   [0066]      In one embodiment, the DIAL REST service enables a discovery client to query,
20 launch and optionally stop applications that are hosted or running on a discovery server device.
   [0067]      5.0 DIAL SERVICE DISCOVERY
   [0068]      In one embodiment, the DIAL service discovery component 106A is implemented
   using a specified Search Target within messages structured with SSDP (Simple Service Discovery
   Protocol), and a specified header in the response to an HTTP (Hypertext Transfer Protocol) request
25 for a UPnP (Universal Plug and Play) device description. The SSDP protocol is described in UPnP
   Device Architecture 1.1, 15 October 2008, available at the time of this writing in the folder
   /sdcps-and-certification/standards/device-architecture-documents/    of the HTTP server upnp.org.
                                                     11

   [0069]      In one embodiment, the DIAL REST service component 106B is accessed using
   HTTP, as described in R. Fielding et al., "Hypertext Transfer Protocol - HTTP/1 .1," Request for
   Comment (RFC) 2616, June 1999, published by The Internet Society. In one embodiment,
   discovery clients and discovery servers support the requirements of section 2.1 of the UPnP
 5 protocol and, in particular, HTTP 1.0 is typically always supported and HTTP 1.1 may be
   supported.
   [0070]      The effect of this arrangement is that an existing UPnP server on a first screen device is
   supported if it is available, but it is not essential to have in the first screen device. Alternatively, the
   first screen device could implement an HTTP server to provide equivalent functions. Further, the
 0 arrangement herein facilitates efficient discovery of the first screen application 104 by the
   discovery client 112 and second screen app 113, using well-defined communication mechanisms
   that are compatible with emerging Web interaction standards.
   [0071]      FIG. 2 is a message flow diagram that illustrates one implementation of the DIAL
   service discovery component. In FIG. 2, a series of messages are passed over a network between a
 5 UPnP server and a DIAL client, which may correspond respectively to UPnP server 107 and
   discovery client 112 of FIG. 1A.
   [0072]      Message (1) of FIG. 2 is an M-SEARCH request, an example of which is shown in
   FIG. 3. In an embodiment, a discovery client attempting to discover one or more discovery servers
   sends an M-SEARCH request as defined in section 1.3.2 of the UPnP Device Architecture over
20 UDP to the multicast address 239.255.255.250 and UDP port 1900. As seen in FIG. 2, the request
   is directed to a UPnP server on the first screen device, to enable leveraging UPnP server
   capabilities for those first screen devices that support UPnP. The request includes a Search Target
   (ST) header with the following value: urn:dial-multiscreen-org:service:dial: 1
                                                          12

   [0073]      In other embodiments, different ST values may be used and the particular example
   value provided above is not critical. While the multicast address given above is for IPv4, in other
   embodiments, a similar process may be used for IPv6 addresses based on an equivalent multicast
   address that is compatible with IPv6.
 5 [0074]      Message (2) of FIG. 2 is an M-SEARCH response, an example of which is shown in
   FIG. 4. In an embodiment, a SSDP server or UPnP server receiving an M-SEARCH request
   comprising the ST header defined above responds as defined in section 1.3.3 of the UPnP Device
   Architecture. The response comprises a LOCATION header containing an absolute HTTP URL
   for the UPnP description of the root device. The root device is referenced to ensure returning a
 0 highest-order UPnP description applicable to the first screen device 102 rather than a description
   for a subordinate service that is also running on the first screen device. The host portion of the
   URL either resolves to an IP address, or comprises an IP address. The ST header of the response
   contains the same identifier as specified in the preceding paragraph. As shown in FIG. 2, once
   message (2) is received by the DIAL client, the process of discovering a DIAL enabled TV is
 5 completed.
   [0075]      Message (3) of FIG. 2 is a device description request, an example of which is shown in
   FIG. 5. In an embodiment, in response to receiving the M-SEARCH response shown as message
   (2), the discovery client sends an HTTP GET request to the URL that was received in the
   LOCATION header of the M-SEARCH response. In an embodiment, matching of SSDP header
20 field names is not case sensitive.
   [0076]      Message (4) of FIG. 2 is a device description response, an example of which is shown
   in FIG. 6. In an embodiment, in response to receiving a valid HTTP GET request for the device
   description, a discovery server responds with an HTTP response that comprises the UPnP device
   description as defined in section 2 of the UPnP Device Architecture. In addition, in an
25 embodiment, the request is not redirected. If the request is successful, then the HTTP response
   contains a header field denoted Application-URL, the value of which is an absolute HTTP URL
   identifying the DIAL REST service, referred to herein as the DIAL REST service URL. The host
                                                     13

   portion of the URL either specifies an IP address or resolves to an IP address. As shown in FIG. 2,
   once message (4) is received by the DIAL client, the process of looking up a DIAL REST service
   is completed.
   [0077]      In an embodiment, in ABNF notation, the format of the Application-URL header is:
 5 Application-URL    =  "Application-URL" ":" absoluteURI
   [0078]      In an embodiment, a discovery client receiving such a response uses the provided URL
   to access the DIAL REST service as further described herein. In an embodiment, the
   "friendlyName" field of the device description, as defined in UPnP, may be used for presentation
   in the discovery client device user interface; for example, such names may be shown in lists or
 0 menus that offer users a choice of discovery server devices to interact with.
   [0079]      Using the foregoing approach, a second screen client computer can first discover the
   existence of a responsive discovery service at a first screen device, and then learn the location of
   other information describing applications that are available on the first screen device. Thereafter,
   the second screen client computer can selectively invoke one or more of the applications of the
 5 first screen device to perform functions of interest, using an intermediary such as the DIAL REST
   service component to interface to an application manager of the first screen device 102.
   [0080]      6.0 DIAL REST SERVICE
   [0081]      6.1 Application Resources
   [0082]      In an embodiment, the DIAL REST component 106B interoperates with applications
20 (for example, Netflix or YouTube) as resources that are identified by URLs. Operations related to
   a particular application are performed by sending HTTP requests based on the particular URL for
   that particular application, which may be denoted an Application Resource URL. While the DIAL
   REST component 106B is illustrated as an example, other embodiments may use alternatives to
   REST including SOAP, a proprietary TCP-based protocol, or an instant messaging Jabber-style
25 protocol based on XMPP.
   [0083]      In an embodiment, the Application Resource URL is formed by concatenating the
   Application-URL and the Application Name. In this context, the platform application manager is
                                                     14

   any functional unit of the first screen device 102 that is responsible for launching applications,
   forking or spawning processes, acting as an executive, or performing similar functions; the
   application manager may be a unit or service of the operating system that controls first screen
   device 102.
 5 [0084]      The Application Name for each application is defined by the application provider.
   Application Names are registered in the DIAL Registry that is further described in section 7 of this
   disclosure.
   [0085]      6.2 Launching an Application
   [0086]      FIG. 7 is a message sequence diagram illustrating application launch. In FIG. 7, a
 0 series of messages are passed over a network between a DIAL REST service and a DIAL client,
   which may correspond respectively to DIAL REST service component 106B and discovery client
   112 of FIG. 1A.
   [0087]      Prior to sending an application launch request, the DIAL client may first optionally
   verify an existing installation of a specific application by sending message (1), or an Application
 5 Information Request. If a message (2) indicating a "200 OK" is received from the DIAL REST
   service in response, then the DIAL client can proceed to send message (3). However, if a different
   message (2) is received, then the DIAL client may respond accordingly, as discussed further below
   in conjunction with FIG. 10, FIG. 11 A, FIG. 1 IB, and Table 2. For example, if the specific
   application is not installed but is installable, then the DIAL client may initiate an installation of the
20 specific application, allowing the verification to succeed.
   [0088]      In an embodiment, as shown in message (3) of FIG. 7, a discovery client attempting to
   launch an application on a discovery service sends an application launch request in the form of an
   HTTP POST request to the Application Resource URL for the desired application, an example of
   which is shown in FIG. 8. In an embodiment, which applications are available to launch using the
25 methods herein are configured at the discretion of the party that is implementing the discovery
   server. In various embodiments, the discovery server may make one, some, or all applications
   running on the first screen device available for invocation using the techniques herein. The
                                                        15

   message body of the POST request may be empty, or may contain an argument string to be passed
   to the application on launch. In an embodiment, if the message body of the POST request is
   non-empty, then the MIME type is "text/plain", the character encoding typically is UTF-8 and the
   character encoding is indicated explicitly by including the "charset" MIME parameter.
 5 [0089]      In various embodiments, how the argument string is passed to the application may be
   implemented differently in various platforms and applications, and is not critical or within the
   scope of this disclosure. The format of the argument should match the requirements of the
   application that is launched. For example, key-value pairs, JSON, or XML may be used and the
   particular selection of argument format is not critical. In an embodiment, a discovery server may
 0 pass the argument string directly to the application, and applications do not assume that any
   security checks have been performed. Therefore, applications typically perform their own security
   checks on the argument data. Example security checks include character encoding checks.
   [0090]      In response to receiving a valid POST request, a discovery server first extracts the
   Application Name from the POST URL. If the POST URL is invalid or cannot be processed to
 5 extract the Application Name, then the discovery server returns an HTTP response code as
   specified in the HTTP protocol specification.
   [0091]      In an embodiment, as shown in message (4) of FIG. 7, a discovery service sends an
   application launch response to the discovery client in the form of an HTTP response, an example
   of which is shown in FIG. 8. The discovery server performs a plurality of responsive actions
20 depending upon factors such as: whether the Application Name is not recognized; whether the
   content length of the message body exceeds the maximum size supported by the discovery server;
   the current application state including Not Started (application is not running), Starting (the
   application is undergoing a restart due to another DIAL REST service request or for another
   reason); Running (the application is running); whether the message body is empty. The specific
25 responsive action may be reflected in the application launch response. TABLE 1 summarizes
   actions that may be implemented in an embodiment.
                                                     16

      Precedence           Application        Message Body         Application             Action
                           Recognized                                   State
             1                  No                  Any                  n/a          404 Not Found
            2                   Yes              Too long                n/a           413 Request
                                                                                      entity too large
            3                   Yes               Empty             Not running        201 Created
                                                                                     Start application
            4                   Yes            Non-empty            Not running        201 Created
                                                                                     Start application
                                                                                       with provided
                                                                                     argument, if any
            5                   Yes               Empty                Starting         No action
            6                   Yes            Non-empty               Starting         No action
            7                   Yes               Empty               Running           No action
            8                   Yes            Non-empty              Running          Provide new
                                                                                     argument to app
                                    Table 1 - Application Start Actions
   [0092]       If the application is running after the action specified above, then the discovery server
   returns an HTTP response with response code 201 Created, as shown by message (4) in FIG. 7. In
   this case, the header of the response contains an absolute URL identifying the running instance of
 5 the application, denoted the Application Instance URL. The host portion of the URL is either an IP
   address or resolves to an IP address and the response body is null.
   [0093]       Otherwise-for example, if the application cannot be started or re-started successfully,
   the discovery server returns an HTTP response with response code 503 Service Unavailable. In
   various embodiments, if the application is already running and an argument is provided, and the
10 first screen device does not support providing new arguments to running applications, then the
                                                       17

   application may be restarted with the new argument. Further, to run the application, the host
   system typically uses a non-blocking form of fork, exec, spawn, or the equivalent that will trap any
   immediate system error and cause returning an HTTP 503 Service Unavailable error. If no error
   occurs and the system command to run the application succeeds, then the application is running for
 5 purposes of this disclosure. Accordingly, the check for an existing installation of the specific
   application in messages (1) and (2) of FIG. 7 may be optionally omitted, as the receiving of a 404
   Not Found or a 503 Service Unavailable in the application launch response message (4) can
   indicate the availability of the specific application.
   [0094]      The Application Instance URL may be used to request information about and to stop
 0 the running instance of the application, as further described herein.
   [0095]      6.3 Stopping an Application
   [0096]      In an embodiment, a discovery client attempting to stop a running instance of an
   application on a discovery server sends an HTTP DELETE request to the Application Instance
   URL. In an embodiment, a discovery server optionally supports the HTTP DELETE request to
 5 permit stopping application instances. If the DELETE request is not supported, then the discovery
   server returns an HTTP response with response code 501 Not Implemented. If the HTTP DELETE
   request is supported, then in response to receiving a DELETE request, the discovery server first
   determines whether the URL in the request corresponds to a running application instance. If so,
   then the discovery server sends a response with the appropriate HTTP response code as defined in
20 the HTTP specification. If the provided URL does not correspond to an application instance that is
   currently running, then the server returns an HTTP response with response code 404 Not Found.
   [0097]      Otherwise, the discovery server sends an HTTP response with response code 200 OK
   and attempts to stop the running application; these operations may be carried out asynchronously.
   [0098]      6.4 Querying for Application Information
25 [0099]      In an embodiment, a discovery client that wishes to discover information about an
   application sends an HTTP GET request to the Application Resource URL, as described in Section
   6.1 above. FIG. 10 illustrates an Application Information Request.
                                                      18

  [0100]       In an embodiment, in response to receiving such a GET request, the discovery server
  first extracts the Application Name from the request URL. If the GET request is invalid or cannot
  be processed to extract the Application Name, then the discovery server returns the appropriate
  HTTP response code as defined in the HTTP specification.
5 [0101]       If the Application Name is not recognized, then the server returns an HTTP response
  with response code 404 Not Found.
  [0102]       Otherwise, the discovery server sends an application information response in the form
  of a HTTP response with response code 200 OK, an example of which is shown in FIG. 11 B. The
  MIME type of the response may be "text/xml" and the character encoding may be UTF-8 and can
0 be indicated using the "charset" MIME parameter. The XML document may conform to the
  schema set forth in FIG. 11 A, except that the discovery client is configured to ignore unrecognized
  XML elements and attributes. TABLE 2 summarizes the semantics of the schema for one example
  embodiment.
5
        Element or                                           Definition
         Attribute
  Name                     Contains the Application Name
  Options
                           If true, indicates that the DELETE operation described above is
  @allowStop               supported. If false, indicates that the DELETE operation is not
                           supported.
  State                    "running" indicates that the application is installed and running.
                           "stopped" indicates that the application is installed and not running. A
                           string beginning "installable=" indicates that the application is not
                           installed, but is available for installation. Any other value is invalid and
                           is ignored.
                                                       19

   Link                     Optional element that should be included when an application is
                            running. The exception is when stopping an application is not
                            supported; in that case, <link> does not need to be provided. The value
                            of the "rel" attribute is "run". The "href' attribute contains the resource
                            name of the running application, such as "run" or "pid-25352". This
                            name typically matches the last portion of the name returned in the 201
                            Created response.
                              Table 2 - Application Info Schema Summary
   [0103]      6.5 Triggering Installation of an Application
   [0104]      In an embodiment, discovery servers may support client triggering of application
   installation for specific applications that are not currently installed.
 5 [0105]      In an embodiment, if the Application Name is recognized, the application is not
   installed and the discovery server supports client triggering of application installation for this
   particular application, then the discovery server returns a "state" element beginning with the string
   "installable=". The remainder of the element contains an absolute URL. The host portion of the
   URL is an IP address or resolves to an IP address. Thereafter, a discovery client may initiate
 0 installation of the application on the discovery server by sending an HTTP GET request to the
   specified URL.
   [0106]      In response to receiving such a request at the discovery server, if the Application Name
   is recognized, and the application is not installed and the discovery server does not support
   triggering of application installation for the specified Application Name, then the discovery server
15 returns an HTTP response with response code 404 Not found.
   [0107]      In an embodiment, if an application is installable, then the discovery client can select
   whether to request the installable URL that is provided, through a GET request. For example, a
   second screen app, hosted on the same computer on which the discovery client is running, may
   generate a user interface message such as, "Application is not installed. Would you like to install it
                                                        20

   now?" The process by which the first screen device handles the installation request is beyond the
   scope of this disclosure and various options include immediate installation of the app, presentation
   of the app in a marketplace or purchase facility, etc.
   [01081      7.0 DISCOVERY REGISTRY
 5 [0109]      In an embodiment, to ensure that the correct name for each application is well-defined,
   and to avoid naming conflicts, Application Names are registered in a data repository termed a
   DIAL Registry. In an embodiment, a service provider maintains the registry, which is available to
   any other party that implements a discovery server or discovery client as described herein.
   Application Names may be registered explicitly, or a set of Application Names having a common
 0 prefix may be registered by registering only an Application Prefix.
   [0110]      In an embodiment, each Application Name and Application Prefix comprises a
   sequence of characters that match the "pchar" production described in Berners-Lee (RFC 3986),
   referenced above. In some embodiments, an Application Prefix comprises a recognizable
   company name, for example, "Acme," "com.acme," etc.
 5 [0111]      In an embodiment, Application Names may be registered if the application is actually
   available in the market and there is no conflict with previously registered names or prefixes.
   Application prefixes can be registered if the company name in the prefix is actively delivering
   applications or devices that run them to the market. Names or prefixes that may be confused with
   previous registrations or are not intended for use with the discovery services described herein
20 should not be registered.
   [0112]      8.0 IMPLEMENTATION EXAMPLE - HARDWARE OVERVIEW
   [0113]      FIG. 12 is a block diagram that illustrates a computer system 1200 upon which an
   embodiment of the invention may be implemented. Computer system 1200 includes a bus 1202 or
   other communication mechanism for communicating information, and a processor 1204 coupled
25 with bus 1202 for processing information. Computer system 1200 also includes a main memory
   1206, such as a random access memory (RAM) or other dynamic storage device, coupled to bus
   1202 for storing information and instructions to be executed by processor 1204. Main memory
                                                    21

   1206 also may be used for storing temporary variables or other intermediate information during
   execution of instructions to be executed by processor 1204. Computer system 1200 further
   includes a read only memory (ROM) 1208 or other static storage device coupled to bus 1202 for
   storing static information and instructions for processor 1204. A storage device 1210, such as a
 5 magnetic disk or optical disk, is provided and coupled to bus 1202 for storing information and
   instructions.
   [0114]       Computer system 1200 may be coupled via bus 1202 to a display 1212, such as a
   cathode ray tube (CRT), for displaying information to a computer user. An input device 1214,
   including alphanumeric and other keys, is coupled to bus 1202 for communicating information and
 0 command selections to processor 1204. Another type of user input device is cursor control 1216,
   such as a mouse, a trackball, or cursor direction keys for communicating direction information and
   command selections to processor 1204 and for controlling cursor movement on display 1212. This
   input device typically has two degrees of freedom in two axes, a first axis (e.g., x) and a second
   axis (e.g., y), that allows the device to specify positions in a plane.
 5 [0115]       The invention is related to the use of computer system 1200 for implementing the
   techniques described herein. According to one embodiment of the invention, those techniques are
   performed by computer system 1200 in response to processor 1204 executing one or more
   sequences of one or more instructions contained in main memory 1206. Such instructions may be
   read into main memory 1206 from another machine-readable medium, such as storage device
20 1210. Execution of the sequences of instructions contained in main memory 1206 causes
   processor 1204 to perform the process steps described herein. In alternative embodiments,
   hard-wired circuitry may be used in place of or in combination with software instructions to
   implement the invention. Thus, embodiments of the invention are not limited to any specific
   combination of hardware circuitry and software.
25 [0116]       The term "machine-readable medium" as used herein refers to any medium that
   participates in providing data that causes a machine to operation in a specific fashion. In an
   embodiment implemented using computer system 1200, various machine-readable media are
                                                      22

   involved, for example, in providing instructions to processor 1204 for execution. Such a medium
   may take many forms, including but not limited to storage media and transmission media. Storage
   media includes both non-volatile media and volatile media. Non-volatile media includes, for
   example, optical or magnetic disks, such as storage device 1210. Volatile media includes dynamic
 5 memory, such as main memory 1206. Transmission media includes coaxial cables, copper wire
   and fiber optics, including the wires that comprise bus 1202. Transmission media can also take the
   form of acoustic or light waves, such as those generated during radio-wave and infra-red data
   communications. All such media must be tangible to enable the instructions carried by the media
   to be detected by a physical mechanism that reads the instructions into a machine.
 0 [0117]      Common forms of machine-readable media include, for example, a floppy disk, a
   flexible disk, hard disk, magnetic tape, or any other magnetic medium, a CD-ROM, any other
   optical medium, punchcards, papertape, any other physical medium with patterns of holes, a
   RAM, a PROM, and EPROM, a FLASH-EPROM, any other memory chip or cartridge, a carrier
   wave as described hereinafter, or any other medium from which a computer can read.
 5 [0118]      Various forms of machine-readable media may be involved in carrying one or more
   sequences of one or more instructions to processor 1204 for execution. For example, the
   instructions may initially be carried on a magnetic disk of a remote computer. The remote
   computer can load the instructions into its dynamic memory and send the instructions over a
   telephone line using a modem. A modem local to computer system 1200 can receive the data on
20 the telephone line and use an infra-red transmitter to convert the data to an infra-red signal. An
   infra-red detector can receive the data carried in the infra-red signal and appropriate circuitry can
   place the data on bus 1202. Bus 1202 carries the data to main memory 1206, from which processor
   1204 retrieves and executes the instructions. The instructions received by main memory 1206 may
   optionally be stored on storage device 1210 either before or after execution by processor 1204.
25 [0119]      Computer system 1200 also includes a communication interface 1218 coupled to bus
   1202. Communication interface 1218 provides a two-way data communication coupling to a
   network link 1220 that is connected to a local network 1222. For example, communication
                                                     23

   interface 1218 may be an integrated services digital network (ISDN) card or a modem to provide a
   data communication connection to a corresponding type of telephone line. As another example,
   communication interface 1218 may be a local area network (LAN) card to provide a data
   communication connection to a compatible LAN. Wireless links may also be implemented. In
 5 any such implementation, communication interface 1218 sends and receives electrical,
   electromagnetic or optical signals that carry digital data streams representing various types of
   information.
   [0120]      Network link 1220 typically provides data communication through one or more
   networks to other data devices. For example, network link 1220 may provide a connection
 0 through local network 1222 to a host computer 1224 or to data equipment operated by an Internet
   Service Provider (ISP) 1226. ISP 1226 in turn provides data communication services through the
   world wide packet data communication network now commonly referred to as the "Internet" 1228.
   Local network 1222 and Internet 1228 both use electrical, electromagnetic or optical signals that
   carry digital data streams. The signals through the various networks and the signals on network
 5 link 1220 and through communication interface 1218, which carry the digital data to and from
   computer system 1200, are exemplary forms of carrier waves transporting the information.
   [0121]      Computer system 1200 can send messages and receive data, including program code,
   through the network(s), network link 1220 and communication interface 1218. In the Internet
   example, a server 1230 might transmit a requested code for an application program through
20 Internet 1228, ISP 1226, local network 1222 and communication interface 1218.
   [0122]      The received code may be executed by processor 1204 as it is received, and/or stored in
   storage device 1210, or other non-volatile storage for later execution. In this manner, computer
   system 1200 may obtain application code in the form of a carrier wave.
   [0123]      9.0 OTHER ASPECTS OF DISCLOSURE
25 [0124]      In the foregoing specification, embodiments of the invention have been described with
   reference to numerous specific details that may vary from implementation to implementation.
   Thus, the sole and exclusive indicator of what is the invention, and is intended by the applicants to
                                                    24

   be the invention, is the set of claims that issue from this application, in the specific form in which
   such claims issue, including any subsequent correction. Any definitions expressly set forth herein
   for terms contained in such claims shall govern the meaning of such terms as used in the claims.
   Hence, no limitation, element, property, feature, advantage or attribute that is not expressly recited
 5 in a claim should limit the scope of such claim in any way. The specification and drawings are,
   accordingly, to be regarded in an illustrative rather than a restrictive sense.
   [0125]      Aspects of the subject matter described herein are set out in the following numbered
   clauses:
   [01261       1. A method comprising: initiating a discovery request in a network; receiving, in
 0 response to the discovery request, a discovery response identifying a discovery server on a
   first-screen device; sending a launch request to the discovery server to cause, on the first-screen
   device, a launching of a specific application; identifying the specific application to a local
   application executing on a second-screen device; and causing, through the network, an interaction
   between the local application and the specific application; wherein the method is performed on one
 5 or more computing devices.
   [0127]      2. The method of clause 1, wherein the one or more computing devices is the
   second-screen device.
   [0128]      3.  The method of any of clause 1-2, wherein the interaction comprises showing a
   movie on the first-screen device using the specific application, wherein the movie is selected using
20 the local application.
   [0129]      4. The method of any of clause 1-3, wherein the interaction comprises showing a
   video on the first-screen device using the specific application, wherein the video is selected by
   passing a network address corresponding to the local application from the local application to the
   specific application.
25 [0130]      5.  The method of clause 4, wherein the specific application is exited after the showing
   of the video.
                                                      25

   [0131]      6. The method of any of clause 1-5, wherein the specific application is a
   browser-based application executing within a web browser of the first-screen device, and wherein
   the launch request specifies a network address of the browser-based application.
   [0132]      7. The method of clause 6, wherein the network address of the browser-based
 5 application is a cloud address outside of the network.
   [0133]       8. The method of any of clauses 1-7 further comprising, prior to the sending of the
   launch request: verifying an availability of the specific application by sending an application
   information request to the discovery server and checking an application information response from
   the discovery server.
 0 [0134]      9. The method of clause 8, wherein the checking of the application information
   response indicates that the specific application is not installed but is installable, and wherein the
   verifying is in response to initiating an installing of the specific application.
   [01351       10. The method of any of clauses 1-9, wherein the network is a local network.
   [01361       11. The method of any of clauses 1-10, wherein the discovery server is selected from a
 5 plurality of discovery servers.
   [01371       12. The method of any of clauses 1-11, wherein the discovery response identifies a
   location and a name of the discovery server.
   [01381       13. The method of any of clauses 1-12, wherein the discovery request is sent using
   Universal Plug and Play (UPnP).
20 [01391       14. The method of any of clauses 1-13, wherein the launch request further includes one
   or more specified parameter values.
   [0140]       15. The method of any of clauses 1-14 wherein the first-screen device comprises any of
   a television, set-top box, game console, digital video recorder, disc player, or similar device
   primarily capable of playing or generating a visual display of an audiovisual program.
25 [0141]       16. The method of any of clauses 1-15 wherein the second-screen device comprises
   any of a smartphone, tablet computer, laptop computer, netbook computer, or other general
   purpose computing device or workstation.
                                                      26

  [01421     17. A non-transitory computer-readable data storage medium storing one or more
  sequences of instructions which when executed cause one or more processors to perform any of the
  methods recited in clauses 1-16.
  [0143]     18. A computer program product including instructions which, when implemented on
5 one or more processors, carries out any of the methods recited in clauses 1-16.
  [0144]     19. A second-screen computing device having a processor configured to perform any
  of the methods recited in clauses 1-16.
                                                  27

    THE CLAIMS DEFINING THE INVENTION ARE AS FOLLOWS:
             1.       A method comprising:
             initiating a discovery request in a network;
             receiving, in response to the discovery request, a discovery response identifying a
 5  discovery server on a first-screen device;
             sending a launch request to the discovery server to cause, on the first-screen device, a
    launching of a specific application;
             identifying the specific application to a local application executing on a second-screen
    device;
 0           causing, through the network, an interaction between the local application and the specific
    application;
             wherein the method is performed using one or more computing devices.
             2.       The method of claim 1, wherein one of the one or more computing devices is the
 5  second-screen device.
             3.       The method of claim 1, wherein the interaction comprises showing a movie on the
    first-screen device using the specific application, wherein the movie is selected using the local
    application.
 10
             4.       The method of claim 1, wherein the interaction comprises showing a video on the
    first-screen device using the specific application, wherein the video is selected by passing a
    network address corresponding to the local application from the local application to the specific
    application.
25
             5.       The method of claim 4, wherein the specific application is exited after the showing
    of the video.
             6.       The method of claim 1, wherein the specific application is a browser-based
30  application executing within a web browser of the first-screen device, and wherein the launch
    request specifies a network address of the browser-based application.
                                                       28

            7.       The method of claim 6, wherein the network address of the browser-based
    application is one of a local address or a cloud address outside of the network.
 5           8.      The method of claim 1 further comprising, prior to the sending of the launch
    request, verifying an availability of the specific application by sending an application information
    request to the discovery server and checking an application information response from the
    discovery server.
 0          9.       The method of claim 8, wherein the checking of the application information
    response indicates that the specific application is not installed but is installable, and wherein the
    verifying is in response to initiating an installing of the specific application.
             10.     The method of claim 1, wherein the discovery server is selected from a plurality of
 5  discovery servers.
             11.     The method of claim 1, wherein the discovery request is sent using Universal Plug
    and Play (UPnP), and wherein the discovery response identifies a location and a name of the
    discovery server.
 10
             12.     The method of claim 1, wherein the launch request further includes one or more
    specified parameter values.
             13.     The method of claim 1 wherein the first-screen device comprises any of a
25  television, set-top box, game console, digital video recorder, disc player, or similar device
    primarily capable of playing or generating a visual display of an audiovisual program, and wherein
    the second-screen device comprises any of a smartphone, tablet computer, laptop computer,
    netbook computer, or other general purpose computing device or workstation.
30           14.     An apparatus comprising one or more devices configured to perform a method as
    recited in any of Claims 1-13.
                                                       29

         15.    A computer-readable storage medium comprising instructions, which when
  executed by one or more processors, cause performance of a method as recited in any of Claims
  1-13.
5
                                                30

<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
<removed-apn> <removed-date>
