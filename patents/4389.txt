Abstract:
This invention is a way of detection in system exceptions by using K-nearest neighbor
algorithm. The method will define the user system'      s instruction set to a converted
characteristic, and distinguish the data set to training data and testing data. By using
the K-nearest neighbor, it recognizes the data sets and predicts the recognition
results to estimate the system exceptions. If there are exceptions, it will alarm the
user. The method is easily to approach, high accuracy with strong practicability.
                                            1

                        User1                        user_cmnd_feature
                                       fdist
                        User2                        user cmd feature
                                        fdiSt
                        User50                       user_CMd_feature            Data
                                        fdist
                                     user1_label
                                   L user50_label
                                                 Figure 1
                                                  -Etra
                                                   ]                                      accuary
                                                                              Different K    *     Pick Kopt
                                                                                          accuary
                                                   Fig.2
                             New                                        normal
                      o command                                        operation
                              list
                                         Use Kopt                         Yes
New User DataProcess-  History Data                      KNN                   a            abnormal         Warning
                                                                                           operation
                                                   Fig.3
                                                       1

DESCRIPTION
TITLE
A detection method based on k-nearest neighbor algorithm for system anomaly
FIELD OF THE INVENTION
The invention belongs to the field of information security, in particular to a system
anomaly detection method.
BACKGROUND OF THE INVENTION
Network and Information Security is a hotspot of field of study in the world.
Information, as a resource, is essential to the modern society because of its
universality, productivity and multi-utility. Regularly, the information stored in
electronic devices contains special value, application and privacy. When the
information is unexpectedly obtained through malicious intrusion of computer
systems, private property and safety may be endangered. For instance, in July 2012,
a hacker group called D33Ds Company attacked the sub-website, Yahoo Voice, of the
large internet cooperation Yahoo by using SQL injection, and they successfully
usurped more than 450,000 user's password. These passwords were made public
afterwards. Another severe incident took place in October 21,2016 in America.
Hackers executed three distributed denial of service attack aiming the DNS server
owned by Dyn Inc. in Manchester, New Hampshire. It paralyzed half of the American
network. However, the identity of the attackers is still unknown. The effect of leaked
data can be even more dangerous. In 2016, information is stolen from the private
E-Mail server, which is one of the presidential candidates Hillary Clinton. WikiLeaks
                                          1

then received these data from anonymous group and revealed it to the public. The
content of it even affected the outcome of the campaign in certain degree.
Apparently, unprotected information and system are fragile and hazardous. These
unfortunate events display the importance of security. It has become increasingly
urgent to protectthose devices.
The common way the illegal attackers apply is to elevate permissions through the
system's vulnerabilities after the intrusion of web server. Attackers may acquire root
authority and take over the system after then. It can cause damage to the user's
privacy and possession.
Discovering and tracing the computers that are been attacked promptly is a
extremely complicated work. When facing tremendous numbers of data, the
advantages of artificial intelligence is prominent since the method of        manual work
and simple classification can no longer fulfill the duty. Artificial intelligence can sort
and analyze the massive amount of data efficiently and learn the pattern of attacks
and affected computers.
However, when dealing with the detection of abnormal system operation, there
encounters   difficulties with the traditional       and  popular solution which        is
deep-learning for artificial intelligence. The quantity of data is not large enough to
make the deep-learning work well. The pattern of the operations varies a lot in some
cases. Also, the idea and structure of deep-learning methods are usually
sophisticated and obscure. The outcome may be unstable sometimes, and this is
unacceptable when it comes to security problems. Thus, the conventional
deep-learning is not suitable for this kind of detection.
                                             2

In our invention, we use a method based on k-nearest neighbor algorithm. First, the
user's system operation queue is read and preprocessed. Then, the data is
characterized and transformed into matrixes. After that, the parameters are set and
algorithm will be invoked. In the end, the accuracy will be shown.
The method of our invention is uncomplicated, comprehensible and practical since
we apply the k-nearest neighbor algorithm. Also, there is no need to estimate the
involved parameters and go through a huge amount of training. Another advantage
it brings is that it is suitable for the classification of rare events. In addition, it
particularly fits multi-modal conditions. Our invention presents a functional and
pragmatic solution for system anomaly detection.
SUMMARY OF THE INVENTION
This patent for invention is a method applying the K Nearest Neighbor (KNN)
algorithm to detect possible security problem of each user, including seven steps as
follow.
Step one: Characterize each user's instruction set, assuming that the number of each
user's feature is 'n', then the number 'i' feature can be expressed as: x ,x ,x.
assuming that the total number of every user's training sample is 'M', then i =1, 2,
3 ...... M .
Step two: Set up a sample matrix 'DataSet', and has the size of M * N.
                                             3

                                              (1)      (1)     (1)          ()
                                                ,x
                                           x 1(2)        ,x
                                                       (2)             x
                                                               (2) ......    (2)
                             DataSet=    x        x       x      ...... x.
                                              (in)      (Mn)     (Mn)          (in)
                                 TesX  (       x1     , ,        3......  x1
Step three: Assume that one of the user's test sample features is TestX.
                                         x 1 ,x       2 ,x 3...       x
                              TeStX T  [XT) X(T)r (T)i                      (T)
Step four: In order to find the distance between each sample feature in DataSet and
TestX, define matrix Twith the size of M * N.
                                         T)       (T)     (T)            T
                                      x(     ,X 2      X3    .      ..),
                                         (T)     (T)      (T)           (T)
                                      x(     ,X 2      X3 .         ..I(
                                 T=   XJ(T), x(T), ,X3T) ...          X.T)
                                 0(x-x
                                D,=                2 ,fori =...      1, 2, 3I...
                                         (T)     (T )     (T)           (T)
                                      x1      X2       X3 .         ..
Step five: Calculate D1    -   square root of the sum of the square of the difference
between TestX and each training sample.
                          D=     Z    X,-i        2     for i= 1, 2,3 ...m
                                  j1
Step six: Sort Di, and select the most repeated class from the first K of the smallest
Dis as the classification of TestX.
                                                    4

Step seven: If the TestX's classification results in exception, the system gives the
alarm.
Description
This patent takes 50 users as an example for illustration. Given that each user has
15000 commands and every 100 operating commands are divided into one
operating sequences. The following is some commands:
cpp     sh   xrdb     cpp    sh   xrdb    mkpts       env    csh   csh
csh    sh   csh    kill  userenv     wait4wm        xhost    xsetroot
reaper     cat   mail    csh    launchef    sh     launchef      hostname
cat    mail    csh    launchef    launchef     sh     hostname      cat
mail    csh    launchef     launchef   sh     sh    sh    sh    ps   ps
ps    hostname      id   nawk     getopt    true      true    grep    date
lp   find    expr   generic      mp   cat   file     post    awk    cat
post    rm     generic    In   In   generic    lp    sh    getpgrp      LOCK
The file "label.txt" presents the normality labels of the last 100 operation sequences
for each of these 50 users, where 0 denotes normal and 1 denotes abnormal. The
following is some excerpts:
00000000000000000100000000000000000000000000000
000
                                                  5

00000000000000000100000000000000010000000000000
000
00000000000000000100000000000000010000000000000
000
00000000000000000100000000000000010000000000000
000
00000000000000000100000000000000010000000000000
000
00000000000000000100000000000000010000000000000
000
We exploit the aforementioned KNN algorithm to detect the abnormal operations on
the user's system.
In particular, the implementation steps are divided into the following 3 steps:
Step 1: Data processing
Stepl.1: Data preprocessing
This step corresponds to Figure 1 DataProcessl.For each user, every 100 operation
commands are taken as one operation sequence, and the user's 15,000 commands
are divided into 150 operation sequences to obtain a matrix with a dimension of 150
x 100 which is denoted by cmdlist and a collection of distinct operation command
of each user which is denoted by fdists.
def loadusercmdnew(filename):
     cmd_list=[]
     dist = []
                                           6

    with open(filename) as f:
          i =0
          x = []
          for line in f:
                 line = line.strip('\n')
                 x.append(line)
                 dist.append(line)
                 i = i+1
                 if i == 100:
                        cmdlist.append(x)
                        x =[]
                        i=0
    fdist = FreqDist(dist).keys()
     return cmd_list, fdist
Stepl.2 Characterization
This step corresponds to DataProcess2 in Figure 1.For each user, the operation
sequence is characterized as a one-dimensional array, and all these sequences are
merged into a matrix denoted by user_cmdfeature. The number of rows in the
matrix is 150 which is equal to the operation sequence number, and the number of
columns is the number of distinct operation commands, or in other words, the
dimensions of fdist. The characterization of a operation sequence is to count the
number of times of the appearance of each element in the operation sequence, then
a numerical matrix of the same dimensions with fdist is obtained.
                                          7

def get usercmdfeaturenew(usercmdlist,dist):
     usercmdfeature = []
     for cmdlist in usercmdlist:
            v = [0]*Ien(dist)
            for i in range(O, len(dist)):
                   if list(dist)[i] in cmdlist:
                          v[i] = v[i] + 1
            usercmdfeature.append(v)
     return usercmdfeature
Stepl.3 Get the label
This step corresponds to DataProcess3 in Figure 1.Read the data from "label.txt".
Sequentially read the labels of last 100 operation sequences of each user by column
and save as one column of matrix X. Finally, the tag value matrix X of the last 100
operation sequences of all 50 users is obtained which has a dimension of 50 x 100.
def getlabel(filename, index=O):
       x=[]
       with open(filename) as f:
              for line in f:
                     line = line.strip('\n')
                     x.append(int( line.splito [index]))
       return x
Stepl.4 Read the file name and the label
                                                      8

Read all the file names of all the files in the folder to facilitate the operation of
stepl.1 to stepl.3. Eventually we will get all the users' filename list matrix denoted
by user filename, of which the dimension is 1 x 50, and each user's label matrix
denoted by userfilenum, of which the dimension is 1 x 50.
def get userfilename(filename):
     files = listdir(filename)
     userfilename = []
     userfilenum = []          # The user's serial number 1,2,3 ...50
     for file in files:
            if file.find('User') !=-I:
                   userfilename.append(file)
                   userfilenum.append(str(re.findall(r'\d+', file)[0]))
     return userfilename, user_filenum
Step2: Determine the value of K
                                 Figure2    Determine the value of K
      For each user, the user data is divided into the train part and the test part,
where the train part contains N operation sequences (N> 50) and the test part
contains (150-N) operation sequences.
      To determine a value of K, use the KNN algorithm to detect whether the (150-N)
operation sequences of the test part is abnormal or not, and compare the results
with the realistic one to obtain the correct rate of prediction for each user. In the
same way, we can obtain the correct rate of all the 50 users, and make out the
average correct rate of the 50 users at this K value.
                                                    9

      Supposing the K value varies from 2 to N, we calculate the average correct rate
under different K values. Select the K value with the highest correct rate as the
optimal K denoted by Kpt
userfiles, user_filenums = DP.getuserfilename('../Data/')
score_rate = []
score_of_K=[]
for k in range(N):
     k = k+1
     for i in range(len(userfiles)):
            usercmdlist, dist = DP.loadusercmd_new('../Data/'+userfiles[i])
            usercmdfeature = DP.get_user_cmdfeature new(user_cmd_list, dist)
          # Each user behind the 100 operating sequence of labels
            labels = DP.getlabel("../Data/label.txt", int(user_filenums[i])-1)
           y = [0]*50 + labels
           x_train  = usercmdfeature[0:N]
           y_train = y[0:N]
           x_test  = usercmdfeature[N:150]
                                                10

             y_test = y[N:150]
             x_train array = np.array(x train)
             x_test array = np.array(xtest)
             outputLabel   = []
             for i in range(0, (150-N)):
                    outputLabel.append(KNN.kNNClassify(np.array(x_test[i]), xtrainarray,
y_train, k))
             socre = np.mean (np.array(ytest)==np.array(outputLabel))*100
             scorerate.append(socre)
      averagescore = np.mean(np.array(scorerate))
       print("When K=", k, 'the average correct rate is:', averagescore)
       score_ofK.append(averagescore)
max    = 0
max-index = 1
for i in range(N):
if float(scoreofK[i]) > max:
                                                11

     max = score-ofK[i]
     maxindex = i + 1
print("The max correct rate is", max)
print("The best K is", maxindex)
Step 3: System anomaly detection
      Step3.1
      When the method of the patent is widely used, e.g. facing a new user, firstly we
take the historical data of his previous operations as the training datasets, and then
make an abnormal judgment on his subsequent new operation instruction.
      Step3.2
       When the user makes a sequence of new operations, take the Kopt         which is
determined in step two, and use KNN to determine whether it is abnormal or not.
      Step3.3
If the operation sequence is judged to be an abnormal operation, an alarm should be
given.
DESCRIPTION OF DRAWINGS
     Figure    Data Processing
     Figure 2 Effect of different proportions (A), pH(B), temperature (C) and substrate
concentration (D) on the activity of PtCu nanoenzyme.
     Figure3   System anomaly detection
                                              12

CLAIMS
   1. A detection method based on k-nearest neighbor algorithm for system
      anomaly, including following steps:
      Given that each user has 15000 commands and every 100 operating
      commands are divided into one operating sequences;
      The file "label.txt" presents the normality labels of the last 100 operation
      sequences for each of these 50 users, where 0 denotes normal and 1 denotes
      abnormal;
      exploit the aforementioned KNN algorithm to detect the abnormal operations
      on the user's system;
      For each user, every 100 operation commands are taken as one operation
      sequence, and the user's 15,000 commands are divided into 150 operation
      sequences to obtain a matrix with a dimension of 150 x 100 which is denoted
      by cmd list and a collection of distinct operation command of each user
      which is denoted by fdists.
                                        1

<removed-apn> <removed-date>
