                                          ABSTRACT
         A commodity-measuring device for autonomously selecting a commodity supplier
among a plurality of commodity suppliers being specified within a blockchain distributed
database,   the    commodity-measuring       device including    a   microcontroller   unit,  a
communication     module     configured   to  communicate    with   a   network,   wherein    a
communication from the communication module is associated with an identifier of the
commodity-measuring       device, a storage, and a transaction manager, wherein the
microcontroller unit is configured to provide commodity consumption data to the transaction
manager, the storage is configured to store a private key, the communication module is
configured to either download a copy of the blockchain distributed database to retrieve the
commodity supplier file and send the transaction by the transaction manager directly to the
blockchain distributed database, or download a copy of the commodity supplier file to retrieve
the commodity supplier file and send the transaction by the transaction manager to the
blockchain distributed database via a server that maintains a copy of the blockchain
distributed database, and retrieve a commodity supplier file stored in the blockchain
distributed database, wherein the commodity supplier file includes parameters of a
commodity supplier and a program, the transaction manager configured to determine
autonomously, based on the commodity consumption data and the parameters in the
commodity supplier file, whether to select the commodity supplier, in those instances where
the determination is positive, the transaction manager is configured to, using the private key,
send a transaction to the blockchain distributed database calling a function in the program
to associate the commodity supplier file with the identifier, and the commodity-measuring
device receives the commodity from the selected commodity supplier according to the
parameters defined in the commodity supplier file.

                            1/c8
             <z    LL LL      LL L
 (NJ      0
               Z0
          z                             S  *
                            CDC
           CD            wV                  0
                                   0
                      L                  0
     4--U
L-              O
0                                              =0
                                    I-L
                  cc~
          EU             a   0 0U
          cc               0<
          U,

                                               1
 DEVICE, METHOD AND SYSTEM FOR AUTONOMOUS SELECTION OF A
     COMMODITY SUPPLIER THROUGH A BLOCKCHAIN DISTRIBUTED
                                        DATABASE
CROSS REFERENCE TO RELATED APPLICATION
[0001]         This Application is a Divisional Application of Australian Patent Application
Number <removed-apn> filed 28 November 2016, the content of which is also incorporated by
reference herein.
TECHNICAL FIELD
[0001a]     The following description relates to a device, a method and a system for
autonomously selecting a commodity supplier among a plurality of commodity suppliers
being specified within a blockchain distributed database.
BACKGROUND OF THE INVENTION
[0002]      In recent years deregulation concerning commodities such as electricity, natural
gas or water has taken place in many countries throughout the world, leading to a new
marketplace including many competing commodity suppliers, i.e. manufacturers and/or
distributors of one or more commodities. Each commodity supplier offers its services under
certain conditions, e.g. the commodity is provided against payment of a certain amount. The
amount to be paid may vary according to specific parameters, such as the time of the day or
particular features of the commodity (e.g. sustainable energy).
[0003]      At the same time, smart meters have been developed, i.e. metering devices that
provide a user with real-time data on commodity use, e.g. via a display, so that the user can
better manage their consumption and, for example, reduce their commodity bills. In other
words, smart meters provide the user with data that may aid the user in reaching an informed
decision regarding which commodity supplier among the plurality of available suppliers may
better suit their needs. However, the user must manually review the offers of each supplier
on the basis of their consumption data or feed their data to third parties that check e.g.

                                               2
different commodity tariffs available on the marketplace. This procedure must be repeated
with a certain frequency, since the offers on the marketplace change quickly, and the user's
consumption habits may also vary.

                                                3
SUMMARY OF THE INVENTION
[0004]       In one aspect, the present invention provides a commodity-measuring device for
autonomously selecting a commodity supplier among a plurality of commodity suppliers
being specified within a blockchain distributed database, the commodity-measuring device
including a microcontroller unit, a communication module configured to communicate with a
network, wherein a communication from the communication module is associated with an
identifier of the commodity-measuring device, a storage, and a transaction manager, wherein
the microcontroller unit is configured to provide commodity consumption data to the
transaction manager, the storage is configured to store a private key, the communication
module is configured to either download a copy of the blockchain distributed database to
retrieve the commodity supplier file and send the transaction by the transaction manager
directly to the blockchain distributed database, or download a copy of the commodity supplier
file to retrieve the commodity supplier file and send the transaction by the transaction
manager to the blockchain distributed database via a server that maintains a copy of the
blockchain distributed database, and retrieve a commodity supplier file stored in the
blockchain distributed database, wherein the commodity supplier file includes parameters of
a commodity supplier and a program, the transaction manager is configured to determine
autonomously, based on the commodity consumption data and the parameters in the
commodity supplier file, whether to select the commodity supplier, in those instances where
the determination is positive, the transaction manager is configured to, using the private key,
send a transaction to the blockchain distributed database calling a function in the program
to associate the commodity supplier file with the identifier, and the commodity-measuring
device receives the commodity from the selected commodity supplier according to the
parameters defined in the commodity supplier file.
[0005]       The term "autonomously" as used herein particularly denotes carrying out a
process by a device or a component thereof without the need of any input from a user (also
referred to as "consumer") of the device during performing of the process. In other words,
the user may configure the device prior to the beginning of the process but the user is not
required to participate in the execution of the process.

                                               4
[0006]      A commodity-measuring device may be a device capable of measuring the
consumption of a commodity, e.g. in a household, an office and so on, over a period of time.
Exemplarily, the commodity-measuring device may be a smart meter. A smart meter is a
device that can make measurements and transmit the collected data to a receiving computer
e.g. for monitoring. The data regarding the commodity consumption may be sent to a
computer of the commodity supplier. The data may include not only how much of a
commodity is used but also time-related information about the consumption. In some
examples, the smart meter may also receive data from said computer, e.g. commands.
Smart meters may also provide the consumption data to a user via a display.
[0007]      A commodity supplier may be a company that distributes one or more
commodities, such as electric energy, water and natural gas, to the public. The users must
purchase the commodities from the commodity suppliers, wherein the parameters of the
supplying (e.g. the amount of commodity available, the price, etc.) are set by the commodity
supplier. A digital marketplace where commodity-measuring devices associated with the
users and systems associated with the commodity suppliers can trade commodities may be
implemented using a blockchain distributed database.
[0008]      A blockchain distributed database particularly is a database that is shared among
a plurality of nodes constituting a network, wherein each node can directly access (i.e. read
and write) the database. A blockchain distributed database is a distributed system in which
there is no central administrator. Each node's copy of the ledger is identical to every other
node's copy, so that the set of copies can be referred to as a single blockchain distributed
database, i.e. the blockchain distributed database is replicated on all the nodes. A blockchain
distributed database is reliable and transparent, in that transactions are permanently
recorded and cannot be revised. It means that data stored in it cannot be altered or deleted
without leaving a trace. Exemplarily, timestamps may be used for this purpose, since a
timestamp proves that the data must have existed at the time. A transaction is an action or
a process that includes one or more database accesses that modify the state of the
blockchain distributed database, such as writing and/or updating of data. In the following, the
term "transaction" will be used to refer both to the action itself and to a definition of the
transaction that may be a collection of entities needed for performing the action, such as

                                                 5
statements, variables and/or parameters. Accordingly, "storing a transaction" may refer to
storing a log of the action performed (e.g. transaction involving writing/updating of data)
and/or to storing the definition of the transaction. When a node "sends a transaction" to the
blockchain distributed database it may access the database in accordance to the action
specified in the transaction, e.g. it may write data and/or run a program stored in the
blockchain (see below).
[0009]      Transactions are grouped into so-called blocks, which are, after validation via a
consensus algorithm, chained together over time in a so-called blockchain. The blocks form
a chain because each block contains a reference to the previous block, for example each
block contains a timestamp of when the previous block has been added to the chain.
[0010]      The validity of a transaction may be verified in the consensus process by checking
a digital signature of the transaction. Each node in the network may be associated with an
identifier and be provided with a cryptographic pair private key - public key. All the nodes in
the network may have a list of the public keys and the respective identifiers of the other
nodes. When a node sends a transaction to the blockchain distributed database, it signs the
transaction with its private key. The transaction may then be broadcast to the other nodes
sharing the blockchain distributed database, wherein each communication from a node uses
the node's identifier. Thus, the other nodes, using the public key associated with the identifier,
can verify the digital signature to check that the communication has not been tampered with.
Once the validity of the transaction has been ascertained, the other nodes may create a new
block including the transaction, signing the block with their private keys, so that the block can
be deployed to the blockchain. The consensus process may be carried out by all nodes or
only by a pre-selected set of nodes. This means that it may be necessary for all the nodes
to sign the block, or only for a part of them.
[0011]      According to an example, the commodity-measuring device may further include a
key manager that is configured to generate the private key and the corresponding public key.
[0012]      A general database may contain rules about the data stored within (e.g. entries in
a column must be numbers). A blockchain distributed database may also enforce rules about
the transactions that modify the data by means of programs stored in the blockchain, as

                                                  6
explained below. Therefore a transaction may be valid, i.e. validated via the consensus
process illustrated above, but not allowed, i.e. it may not comply with the established rules.
[0013]       The blockchain distributed database particularly may feature a permissioned
blockchain. A permissioned blockchain distributed database is a blockchain distributed
database in which transaction processing is performed by nodes associated with known
identities. In other words, the identity of the users of the nodes is whitelisted (or blacklisted),
e.g. through some type of know-your-business (KYB) or know-your-client (KYC) procedure.
Similarly, the blockchain distributed database may be private, meaning that access to the
blockchain distributed database data may be limited, e.g. only to the smart meters and to the
commodity supplier machines.
[0014]       The nodes of the blockchain distributed database may be one or more commodity
measuring devices and a plurality of computers associated with a plurality of commodity
suppliers.
[0015]       In order to interact with the other nodes, the commodity-measuring device may
include a communication module configured to communicate with the network. All the
communications from the commodity-measuring device transmitted via the communication
module are associated with the identifier of the device.
[0016]       Since each transaction sent by a node and then broadcast to all nodes is
associated with the node's identifier, a consumer consumption history may be retrieved when
the node is a commodity-measuring device. The identifier is the only information available
on the blockchain distributed database, no other consumer data are accessible. To increase
the data privacy, the identifier may be periodically modified by the user, thereby preventing
access to the consumption history.
[0017]       The identifier, as well as additional information such as consumption data, current
commodity supplier etc., may be accessible to the user via a dedicated interface (e.g. a user
application program interface) that may be interfaced with the display, if present. While the
identifier is known to the user, the private key may be kept hidden from the user in order to
increase security. The commodity-measuring device may include a storage for storing the
private key. Exemplarily, the storage may be a tamper-resistant device, i.e. it may have

                                                 7
provisions that make it very difficult to access information stored in it for unauthorized parties.
Examples of anti-tamper provisions include epoxy potting, conductive shield layers that
prevent reading of internal signals, custom designed chassis and enclosures to prevent
probing attacks (multi-layer packaging of the storage requiring a particular tool, e.g. particular
screws, to be accessed, or extra-strong layers of packaging), and real-time monitoring of
environmental conditions such as temperature and power. Further anti-tamper provisions
may be software-made, with anti-reverse engineering algorithm in order to avoid access to
certain memory locations. One or more of these provisions may be combined in order to
create several layer of security, such as strong package plus epoxy potting plus tamper
resistant software.
[0018]     The blockchain may not only store transactions but also files including a
combination of data and programs. Particularly, to this aim, the blockchain distributed
database may be provided with a Turing-complete programming language.
[0019]     A blockchain distributed database featuring permissioned blockchain enables the
stipulation of trusted agreements between different nodes, since the users are not
anonymous. The conditions of these agreements may be stored in the blockchain distributed
database and, since they reside in the blockchain distributed database, the conditions are
transparent, i.e. they cannot be covertly modified by one of the parties. Exemplarily, all the
parameters and modalities about the commodity provisioning (e.g. the amount of pre-paid
commodity, commodity available and consumed service-level agreements (SLAs), cost per
unity of commodity, payment modalities, etc.) may be defined in a commodity supplier file
stored in the blockchain. Each commodity supplier may then be specified within the
blockchain distributed database by means of its commodity supplier file. A commodity
supplier computer may create its commodity supplier file and deploy it to the blockchain,
where it resides (i.e. is stored) at a particular address. The commodity supplier computer
sends a transaction (that must be first validated) to the blockchain distributed database in
order to create the commodity supplier file and the transaction is then stored in the
blockchain distributed database. The identifiers of the commodity supplier and the
commodity-measuring device that enter into the agreement may also be stored in the file.
While the identifier of the commodity supplier may be already stored when the file is created,

                                                 8
the identifier of a commodity-measuring device that wants to stipulate an agreement may be
inserted later by a transaction sent by the device, as explained below. Similarly, other data
relative to the commodity-measuring device may be inserted after creation.
[0020]       In addition to data, the commodity supplier file may include at least one program
executable by the nodes in the network. The program may include a set of functions
reachable trough the address at which the file resides in the blockchain. By accessing the
file via its address, one or more functions may be executed. The functions in the program
may be the only way to modify the data in the commodity supplier file. The program is stored
in the blockchain distributed database but is executed locally by the nodes. The functions
may require input to run; when a node sends the transaction that calls a function, it may also
provide the necessary input data. Exemplarily, the operations that can be performed by
executing the functions in the program may include, but are not limited to, one or more of the
following: setting a threshold to the commodity consumption, providing payment methods,
making a payment for a certain amount of commodity, recharging the commodity
provisioning, selecting the commodity supplier as the supplier for a commodity-measuring
device. The blockchain distributed database may be not only permissioned, but also include
rights management for the functions in the programs, in that only some nodes among those
whitelisted may be allowed to call specific functions. In other words, rules may be enforced
on the transactions. For example, setting a threshold to the commodity consumption may
only be performed by a commodity-measuring device, whereas recharging the commodity
provisioning may only be performed by a commodity supplier computer. The function is only
executed if the transaction is both validated and allowed. The transaction is any case stored
in the blockchain distributed database.
[0021]       As   mentioned    above, the     commodity-measuring     device may include a
communication module. In particular, the communication module may retrieve a commodity
supplier file stored in the blockchain distributed database.
[0022]       According to one example, the communication module may download a copy of
the whole blockchain distributed database to the commodity-measuring device. In this case,
the transactions may be then sent by the nodes (specifically by a transaction manager
illustrated below) directly to the blockchain distributed database.

                                              9
[0023]     According to another example, the communication module may only download a
copy of one or more commodity supplier files. In this case, the transactions may be sent by
the nodes (via the transaction manager) to the blockchain distributed database via a server
that maintains a copy of the whole blockchain distributed database.
[0024]     The information contained in a commodity supplier file may be used by the
commodity-measuring device to decide whether to select the associated commodity supplier
for providing the commodity to the premises of the device's user. As explained, the
commodity-measuring device measures the consumption of the commodity, exemplarily by
means of sensors and associated circuitry. The commodity-measuring device may include a
microcontroller to process the consumption data. Furthermore, the device may include a
transaction manager that is capable of determining autonomously whether to select a
commodity supplier. In particular, the transaction manager bases the determination on the
commodity consumption data and the parameters in the commodity supplier file retrieved by
the communication module. The microcontroller may be configured to provide the commodity
consumption data to the transaction manager. Further, the transaction manager may receive
signals from the storage.
[0025]      In one example, the transaction manager may evaluate a matching function that
has at least the consumption data and the commodity supplier parameters as variables in
order to determine autonomously whether to select the commodity supplier. The purpose of
the matching function is to find the best match between a user's commodity needs and the
available offers by the commodity suppliers. The best match may be construed e.g. as the
cheapest commodity supplier or the commodity supplier that offers the commodity with
specific features (e.g. renewable energies). The matching function may be a mathematical
function including weights and/or conditions for the different variables, so that the result of
the evaluated function allows the transaction manager to autonomously determine whether
the offer of the commodity supplier, as specified in the commodity supplier file, is the best
match for the user's needs. Exemplarily, the weights and the parameters may be scaled so
that the result of the evaluated function is a number, and e.g. the lower the number, the
better the match. The significance of the result may be assessed against a predetermined

                                                 10
or determinable optimal value or the matching function may be evaluated by the transaction
manager for a plurality of commodity supplier files and the results may be compared.
[0026]       Besides consumption data and commodity supplier parameters, the matching
function may have additional variables, the values of which may be provided by the
transaction manager for evaluation. The user may communicate the additional variables'
values to the transaction manager e.g. via the communication module. In one example, the
additional variables may e.g. be the weights of the matching function, so that the matching
function may be customizable. Additionally or alternatively, the additional variables may be
estimated consumption data for cases in which measured consumption data are not
available, such as when the commodity-measuring device has just been installed. The
matching function may be defined locally in the commodity-measuring device or in the
commodity supplier file data.
[0027]       The transaction manager may decide to select the commodity supplier as the
supplier for the device's user based on the result of the evaluated matching function, e.g.
whether the result is equal to or lower than the optimal value or whether the result of said
commodity supplier is better than the results of the other commodity supplier(s). If the
determination is positive, the transaction manager may send a transaction that calls a
function in the program for selecting the commodity supplier as the supplier for the
commodity-measuring device. The function, when executed, may store the identifier of the
commodity-measuring device in the commodity supplier file, so that the commodity
measuring device digitally points to the commodity supplier file in the blockchain distributed
database. If the commodity-measuring device, i.e. its identifier, was previously associated
with another commodity supplier and is now switching to a new commodity supplier, the
transaction manager may additionally take steps to remove the previous association, such
as calling a dissociating function in the previous commodity supplier file to dissociate its
identifier from it or modifying a flag in the previous commodity supplier file that indicates that
the contract is invalid or closed. Exemplarily, the function may also require the commodity
supplier node to sign the transaction, thereby allowing the stipulation of a machine-to
machine contract.

                                              11
[0028]      In one example, the transaction may send a second transaction, using the private
key, to the blockchain distributed database calling a function in the program to perform a
payment to the commodity supplier.
[0029]      In another aspect, the present invention provides a computer-implemented
method for autonomously selecting a commodity supplier among a plurality of commodity
suppliers being specified within a blockchain distributed database, the method including
providing, by a microcontroller unit of a commodity-measuring device, commodity
consumption data to a transaction manager of the commodity-measuring device, storing, by
a storage of the commodity-measuring device, a private key, retrieving, by a communication
module of the commodity-measuring device, a commodity supplier file stored in the
blockchain distributed database, wherein the commodity supplier file includes parameters of
a commodity supplier and a program, autonomously determining, by the transaction
manager, based on the commodity consumption data and the parameters in the commodity
supplier file, whether to select the commodity supplier, in those instances where the
determination is positive, sending, by the transaction manager, a transaction to the
blockchain distributed database using the private key, wherein the transaction calls a
function in the program to associate the commodity supplier file with the identifier, and
receiving, by the commodity-measuring device, the commodity from the selected commodity
supplier according to the parameters defined in the commodity supplier file, wherein
retrieving the commodity supplier file includes downloading a copy of the blockchain
distributed database and sending the transaction by the transaction manager directly to the
blockchain distributed database, or downloading a copy of the commodity supplier file and
sending the transaction by the transaction manager to the blockchain distributed database
via a server that maintains a copy of the blockchain distributed database.
[0030]      In another aspect, the present invention provides a computer program product
including computer-readable instructions that, when executed by one or more processors
cause the one or more processors to perform operations for autonomously selecting a
commodity supplier among a plurality of commodity suppliers specified within a blockchain
distribution database, including providing, by a microcontroller unit of a commodity
measuring device, commodity consumption data to a transaction manager of the commodity-

                                                12
measuring device, storing, by a storage of the commodity-measuring device, a private key,
retrieving, by a communication module of the commodity-measuring device, a commodity
supplier file stored in the blockchain distributed database, wherein the commodity supplier
file includes parameters of a commodity supplier and a program, autonomously determining,
by the transaction manager, based on the commodity consumption data and the parameters
in the commodity supplier file, whether to select the commodity supplier, in those instances
where the determination is positive, sending, by the transaction manager, a transaction to
the blockchain distributed database using the private key, wherein the transaction calls a
function in the program to associate the commodity supplier file with the identifier, and
receiving, by the commodity-measuring device, the commodity from the selected commodity
supplier according to the parameters defined in the commodity supplier file, wherein
retrieving the commodity supplier file includes downloading a copy of the blockchain
distributed database and sending the transaction by the transaction manager directly to the
blockchain distributed database, or downloading a copy of the commodity supplier file and
sending the transaction by the transaction manager to the blockchain distributed database
via a server that maintains a copy of the blockchain distributed database.
[0031]       In yet another aspect, the present invention provides a system including a
blockchain distributed database configured to store a plurality of commodity supplier files,
and a commodity-measuring device, including a microcontroller unit, a communication
module configured to communicate with a network, wherein a communication from the
communication module is associated with an identifier of the commodity-measuring device,
a storage, and a transaction manager, wherein the microcontroller unit is configured to
provide commodity consumption data to the transaction manager the storage is configured
to store a private key, the communication module is configured to download a copy of the
blockchain distributed database to retrieve the commodity supplier file and send the
transaction by the transaction manager directly to the blockchain distributed database, or
download a copy of the commodity supplier file to retrieve the commodity supplier file and
send the transaction by the transaction manager to the blockchain distributed database via
a server that maintains a copy of the blockchain distributed database, and retrieve a
commodity supplier file from the plurality of commodity supplier files stored in the blockchain
distributed database, wherein the commodity supplier file includes parameters of a

                                              13
commodity supplier and a program, the transaction manager configured to determine
autonomously, based on the commodity consumption data and the parameters in the
commodity supplier file, whether to select the commodity supplier, in those instances where
the determination is positive, the transaction manager configured to, using the private key,
send a transaction to the blockchain distributed database calling a function in the program
to associate the commodity supplier file with the identifier, and the commodity-measuring
device receives the commodity from the selected commodity supplier according to the
parameters defined in the commodity supplier file.

                                              14
BRIEF DESCRIPTION OF THE DRAWINGS
[0032]      Details of exemplary embodiments are set forth below with reference to the
exemplary drawings. Other features will be apparent from the description, the drawings, and
from the claims. It should be understood, however, that even though embodiments are
separately described, single features of different embodiments may be combined to further
embodiments.
[0033]      Figure 1 shows an example of a smart meter according to the prior art.
[0034]      Figure 2 shows an example of a smart meter for autonomously selecting a
commodity supplier among a plurality of commodity suppliers being specified within a
blockchain distributed database.
[0035]      Figure 3 shows an exemplary flowchart for the initialization of a smart meter.
[0036]      Figure 4 shows an exemplary arrangement of a blockchain distributed database
in which smart meters and commodity suppliers are associated to each other.
[0037]      Figure 5 shows the exemplary arrangement of Figure 4 after a smart meter has
switched to a different commodity supplier.
[0038]      Figure 6 shows an exemplary flowchart of an automatic provisioning process.
[0039]      Figure 7 shows a decentralized architecture for the smart meters-blockchain
distributed database system.
[0040]      Figure 8 shows a semi-decentralized architecture for the smart meters-blockchain
distributed database system.

                                                15
DETAILED DESCRIPTION OF EMBODIMENT(S) OF THE INVENTION
[0041]      In the following, a detailed description of examples will be given with reference to
the drawings. It should be understood that various modifications to the examples may be
made. Unless explicitly indicated otherwise, elements of one example may be combined and
used in other examples to form new examples.
[0042]      In the following an electricity meter will be described as an example for a smart
meter. However, the invention is not limited to electrical energy ("energy" for short) as a
commodity and it will be clear for the person skilled in the art that the principles of the
invention are applicable to other commodities as well.
[0043]      Figure 1 shows an example of a smart meter according to the prior art. The smart
meter may include a microcontroller unit (MCU) 110 and a communication module 120. The
MCU 110 may include a central processing unit (CPU), in addition to a memory and
programmable input/output peripherals, all embedded on a single chip. The MCU 110 may
process the consumption data measured by the smart meter and store the data in local
memory.
[0044]      The communication module 120 may include one or more interfaces to establish
communications between the smart meter and one or more devices in a network to which
the smart meter belongs. Exemplarily, the communication module 120 may include an
interface for a local (LAN) and/or home area network (HAN) and/or an interface for a wide
area network (WAN). Additionally or alternatively, other interfaces such as a Global System
for Mobile Communications (GSM) module and/or other modules for cellphone network
communications may be included in the communication module 120.
[0045]      Furthermore, the smart meter may include a power-line communication (PLC)
analog front-end (AFE) 160 and an analog/digital (A/D) converter 170. The PLC technology
uses existing electrical power lines to transmit data. The MCU 110 may use the PLC
technology to send data to and receive data from a central computer that may be associated
with a commodity supplier. Additionally or alternatively, the MCU 110 may use the
communication module 120 to communicate with the commodity supplier computer. The
combination of the AFE 160 and the MCU 110 supports the PLC technology; while the AFE

                                               16
160 handles analog operations including signal transmission and reception, the MCU 110
executes the software stack associated with a particular PLC protocol. Further, the AFE may
include a sensor that measures the energy consumption.
[0046]      The smart meter may also include a display 150 through which the MCU 110 may
provide a user with real-time data about the energy consumption. In another example (not
shown), a display may be located at a remote location and the MCU 110 may transmit the
real-time data via the communication module 120.
[0047]      Figure 2 shows an example of a smart meter for autonomously selecting a
commodity supplier among a plurality of commodity suppliers being specified within a
blockchain distributed database. The smart meter 100 according to an embodiment of the
invention includes additional elements with respect to the smart meter as shown in Figure 1.
Those elements of Figure 2 that correspond to elements of Figure 1 are provided with the
same reference numbers and are not described once again.
[0048]      The smart meter 100 is capable of interfacing itself with a blockchain distributed
database, which may be copied to the smart meter 100.
[0049]      A blockchain distributed database is a distributed, transactional database that
keeps records of all the transactions that access the database to modify data. The
transactions are bundled in blocks that, before being stored in the database, must be
validated by all (or in some implementations a part of) the nodes across which the blockchain
distributed database is distributed. This validation, or consensus process, may be achieved
by a proof-of-work system called mining, as done in the Bitcoin network, where the nodes
are anonymous. A blockchain may be instead a permissioned blockchain and/or a private
blockchain in which the identities of the nodes are known.
[0050]      If the blockchain distributed database is provided with a Turing-complete
programming language (such as Ethereum), files including programs (or compiled code) and
optionally associated data may be stored in the blockchain, at a specific address. Exemplarily,
every operation that can modify the database may be forced to use one of the programs. In
other words, the blockchain distributed database may not be modified directly but only by
calling a function in the programs stored in the blockchain. Therefore any rules about what

                                               17
is allowed or not allowed in a transaction may be embedded in the programs. If the
executable functions do not allow to change the functions themselves, the rules may be
automatically enforced. In such a case, the nodes would only have to check the digital
signature in order to validate a transaction and the transaction would be automatically
allowed.
[0051]       Given the potential of these programs, they can be used to stipulate contracts
between parties in the network, setting the terms of the agreement and ensuring its validity
and trustworthiness. Therefore, files containing a combination of executable programs and
data and stored in a permissioned blockchain are sometimes referred to as "smart contracts".
For the same reason, the blockchain distributed database may also be referred to as
"distributed ledger", since it may record economic transactions, which is the function of a
ledger.
[0052]       The blockchain distributed database (BD) copy 190 may include the whole of the
blockchain distributed database or only parts of it may be copied. By means of the
communication module 120, the BD copy 190 is kept in synch with the copies in the other
nodes. Specifically, the communication module 120 may broadcast new transactions and
receive updates (new blocks/transactions) of the blockchain distributed database. The
communications transmitted via the communication module 120 may be associated with an
identifier of the smart meter 100, which uniquely identifies the smart meter 100 in the network
of nodes sharing the blockchain distributed database. Furthermore, the smart meter 100 may
also be provided with a cryptographic pair private key - public key. In this regard, the smart
meter 100 may further include a storage 130 and a key manager 132. The key manager 132
may generate the pair private key - public key, wherein the private key is used by the smart
meter 100 to sign transactions sent to the blockchain distributed database. The key manager
132 may also handle the storing and using of the private key. In particular, the private key
may be stored in the storage 130, which may be exemplarily a tamper-resistant storage.
[0053]       Figure 3 shows the initialization of the smart meter 100. At step 310 the smart
meter 100, which may be for example located in a household, is turned on by the user. At
step 320 the smart meter 100 connects to the network by means of the communication
module 120. Via the network the smart meter 100 gains access to the blockchain distributed

                                                18
database. As a node of the blockchain distributed database, the smart meter is associated
to a unique identifier. The unique identifier may be provided by the network, may be an
attribute of the smart meter 100, such as its MAC address, or may be a hash of the public
key. The unique identifier may also be included of a part provided by the smart meter builder
(i.e. an intrinsic feature of the smart meter) and a part assigned sequentially by the network.
At step 330 the key manager 132 randomly generates a pair private key - public key. The
private key may be stored in the storage 130, whereas the public key may be transmitted to
the other nodes in the blockchain distributed database. This communication, like all other
communications from the smart meter 100, carries also the identifier of the smart meter 100.
Finally at step 340 a copy of the blockchain distributed database 190 (as a whole or only
parts of it) is downloaded to the smart meter 100.
[0054]       Referring back to Figure 2, the smart meter 100 may include a transaction
manager 140 that accesses the BD copy 190 in order to autonomously select a commodity
supplier among a plurality of commodity suppliers being specified within the blockchain
distributed database. The transaction manager 140 may be a software component that
shares hardware resources with the BD copy 190. The transaction manager 140 may further
be in communication with the MCU 110, the storage 130 and the communication module
120. The MCU 110 may provide the transaction manager 140 with energy consumption data
and the private key may be retrieved from the storage 130, exemplarily via the key manager
132. The transaction manager 140 may, thus, create a transaction and sign it based on the
signals it receives from the MCU 110 and the storage 130. The role of the communication
module 120 in connection with the transaction manager 140 will be discussed below.
[0055]       The blockchain distributed database, and hence the BD copy 190, may include a
plurality of commodity supplier files (or smart contracts) including parameters of a commodity
supplier and a program, as discussed above. The program may contain one or more
executable functions that allow the nodes in the blockchain distributed database to perform
operations such as paying for the provision of energy or selecting a specific commodity
supplier. The parameters of the commodity supplier may define an offer of the supplier on
the marketplace, such as specifying a price for the energy provision (e.g. per kilowatt), which
may vary according to the time of the day, setting special discounts on the basis of a

                                               19
consumption above or below a certain threshold, stating which percentage of the provided
energy is renewable and so on.
[0056]      Therefore, the transaction manager 140 has access to the consumption data of
the user, which indicate how much energy is consumed as a function of time, and also to the
parameters defining the offer of a commodity supplier. All these data may be fed from the
transaction manager to a matching function that evaluates the service of the commodity
supplier with regards to the user. In other words, the matching function may provide an
indication of how well the offer of the suppliers suits the needs of the user. An exemplary
matching function may compute the costs that the user, according to his habits (e.g. peak of
consumption after 6:00 PM), would incur for obtaining energy from the supplier. This
computation may require taking into consideration not only the prices for the different times
of the day, but, if present, possible discounts applicable for users that consume little energy
(below a certain threshold) or a lot of energy (above a certain threshold). However, costs
may not be the only factor relevant for a user in choosing an energy supplier; for example, a
user may care about the environment and look for a supplier that provides renewable energy.
The matching function may have different variables, to which weights may also be assigned,
in order to provide an assessment about an energy supplier. The matching function may be
stored in the blockchain distributed database or in the individual smart meters.
[0057]      The smart meter 100 may include a user application program interface (API) 180
through which the user can manage the smart meter 100. Exemplarily, the user may provide
values for additional variables of the matching function, e.g. the user may set the weights in
the matching function and/or the user may provide estimated consumption data in case
measured consumption data are not available (such as when the smart meter has just been
installed or if the user anticipates a change in his consumption patterns). Therefore, using
the API 180 and via the communication module 120, the user may submit additional data to
the transaction manager 140. Additionally or alternatively, the API 180 may access directly
the DB copy 190.
[0058]      The transaction manager 140 evaluates the matching function and obtains a
result indicative of the match between the supplier's offer and the user's needs. The result
may be a numerical result that is then evaluated against e.g. a predetermined or

                                               20
determinable optimal value. Alternatively or additionally, the transaction manager 140 may
look at more than one commodity supplier file and compare the results to decide which
supplier to select. This example is shown in Figures 4 and 5.
[0059]      Figure 4 shows an exemplary arrangement of a blockchain distributed database
with four nodes: commodity suppliers Provider 01 and Provider 02 with smart meters Smart
Dev 01 and Smart Dev 02. Each node is associated with an identifier as indicated on the left
of the figure. Smart Dev 01, with identifier Ox1 1, is associated with commodity supplier
Provider 01 that has identifier OxO1. Smart Dev 02, with identifier 0x12, is associated with
commodity supplier Provider 02 that has identifier 0x02. According to the measured (or
estimated) consumption data, Smart Dev 01 needs 20 units and Smart Dev 02 needs 30
units of commodity. Provider 01 has created a commodity supplier file in which the price of
the commodity is set to be 1 dollar per unit. The commodity supplier file of Provider 02 sets
the price of the commodity to be 2 dollar per unit. The transaction manager 140 of Smart
Dev 02 retrieves the price parameters of suppliers OxO1 and 0x02 from the files copied on
the smart meter and evaluates a matching function that computes the overall cost of the
needed commodity. The results are 30 dollars for Provider 01 and 60 dollars for Provider 02,
indicating that commodity supplier Provider 01 is more convenient.
[0060]      Therefore the transaction manager 140 decides to select commodity supplier
Provider 01 and calls the corresponding function in the program of the Provider 01 file, i.e.
the function that associates the commodity supplier file to the identifier 0x12 of the smart
meter Smart Dev 02. The transaction manager 140 signs the corresponding transaction with
the private key obtained from the storage 130. The commodity supplier node of Provider 01,
among others, may validate the transaction, thereby stipulating a machine-to-machine
contract. The resulting configuration of the blockchain distributed database is shown in
Figure 5, wherein the smart meter Smart Dev 02 is associated now to supplier Provider 01.
[0061]      Exemplarily, after the transaction manager 140 selects a commodity supplier by
associating its identifier to the commodity supplier file, the transaction manager 140 may
also execute other functions in the program to e.g. set up a payment method for the
commodity and, subsequently, make payments in exchange for the provisioning of the
commodity. In an example, the program may contain a flag that indicates when a payment

                                                 21
is needed and an external service may (i.e. not present in the blockchain distributed
database) handle the payment, so that sensitive data such as credit card numbers are not
present in the blockchain. An exemplary flow chart of this process is shown in Figure 6.
[0062]      In the commodity supplier file it may be stipulated how much commodity can be
provided to the user's smart meter based on a payment made by the user. At step 610 the
smart meter 100 may measure how much energy is being consumed. The MCU 110 may
transmit the consumption data to the transaction manager 140. At step 620 the transaction
manager 140 may call a function at the address of the energy supplier file to which the smart
meter 100 is associated and execute it to check whether the user has enough energy
provision for their consumption. In other words, the transaction manager 140 may feed the
consumption data to the program in order to determine automatically whether the energy
provision is sufficient (step 630). If so, the smart meter 100 only keeps monitoring the energy
consumption (step 610). If not, at step 640, the checking function in the program may
automatically call another function within the program that performs a payment to the energy
supplier. According to whether the payment is successful (step 650), the available energy
may be updated and the smart meter 100 may keep monitoring the energy consumption
(step 610) or the energy supplier may take a follow-up action as established in the conditions
of the agreement stored in the energy supplier filer (step 660).
[0063]      As discussed above, a transaction may be initiated by any of the nodes in the
blockchain distributed database and must validated before it becomes a permanent part of
it. The transactions may be divided into two main categories: transactions that create a
commodity supplier file, or creation transactions, and transactions that run the program (call
a function) in the commodity supplier file, or call transactions. Typically, an energy supplier
may send a creation transaction to the blockchain distributed database. In other examples,
also consumers may provide energy (e.g. if they have a surplus) and create a supplier file
that sets the conditions at which the energy is sold.
[0064]      The definition of a transaction may have the following structure: {chainname,
transactiontype, [parameters], signature}. The chainname indicates the name of the
blockchainblockchain        distributed     database.   The     transaction   type    may    be

                                                22
SupplierFileCreation for a creation transaction and SupplierFileCall for a call transaction.
The signature, as already discussed, is made by using the private key of the node.
[0065]       For a creation transaction, the parameters may include the binary of the program,
i.e. the compiled version of the source code that contains the one or more functions, possibly
of one or more inputs. Once the transaction is validated, the blockchain distributed database
will store the transaction itself as sent by the node, the binary of the program and, possibly,
data associated with the function.
[0066]       For a call transaction, the parameters may include the address of the supplier file,
to retrieve the binary, and a specification of the function to be called together with the input
data to be fed to the function, if any. Once the transaction is validated, data associated with
the function may be updated and other actions as required by the function may be performed.
As usual, the transaction itself is recorded in the blockchain distributed database.
[0067]       In some implementations, it may be possible to perform automatic actions
according to the rules set by the programs in the blockchain distributed database. For
example, it may be possible to switch the nodes on/off. If e.g. the energy available for use is
zero, the smart meter may be automatically switched off. A flag may be provided in the
commodity supplier file and a third-party service may periodically check the flag and perform
the requested automatic action according to the state of the flag.
[0068]       With reference to Figure 2, it was explained that each smart meter may download
a copy of the whole blockchain distributed database or only of parts of it. Figures 7 and 8
show two different architectures of the smart meters - blockchain distributed database
system that support the two options, respectively.
[0069]       Figure 7 shows a completely decentralized architecture in which each of the smart
meters 700 has a copy of the blockchain distributed database and sends the transactions
directly to the blockchain distributed database. The energy providers 750 are also nodes of
the network. In terms of scalability, the fact that each smart meter needs to have a copy of
the blockchain distributed database may lead to some issues, since the size of the
blockchain distributed database will grow over the time.

                                                23
[0070]      Figure 8 shows a semi-decentralized architecture in which trusted servers 800
maintain full copies of the blockchain distributed database, whereas each of the smart meters
700 only needs to have a copy of the commodity supplier files that it uses. The transactions
initiated by the smart meters 700 are then sent to the blockchain distributed database via the
trusted servers 800. Since the smart meters do not have to maintain a copy of the blockchain
distributed database, the issue of scalability may be solved.
[0071]      Throughout this specification and the claims which follow, unless the context
requires otherwise, the word "comprise", and variations such as "comprises" and
"comprising", will be understood to mean the inclusion of a stated feature or step, or group
of features or steps, but not the exclusion of any other feature or step, or group of features
or steps.
[0072]      The reference to any prior art in this specification is not, an should not be taken
as an acknowledgement, or any suggestion that, the prior art forms part of the common
general knowledge.

                                                24
The claims defining the invention are as follows:
1.     A commodity-measuring device for autonomously selecting a commodity supplier
among a plurality of commodity suppliers being specified within a blockchain distributed
database, the commodity-measuring device including:
       a microcontroller unit;
       a communication module configured to communicate with a network, wherein a
communication from the communication module is associated with an identifier of the
commodity-measuring device;
       a storage; and
       a transaction manager, wherein:
       the microcontroller unit is configured to provide commodity consumption data to the
transaction manager;
       the storage is configured to store a private key;
       the communication module is configured to either:
                download a copy of the blockchain distributed database to retrieve the
       commodity supplier file and send the transaction by the transaction manager directly
       to the blockchain distributed database, or download a copy of the commodity supplier
       file to retrieve the commodity supplier file and send the transaction by the transaction
       manager to the blockchain distributed database via a server that maintains a copy of
       the blockchain distributed database, and
                retrieve a commodity supplier file stored in the blockchain distributed database,
       wherein the commodity supplier file includes parameters of a commodity supplier and
       a program;
                the transaction manager configured to determine autonomously, based on the
       commodity consumption data and the parameters in the commodity supplier file,
       whether to select the commodity supplier;
                in those instances where the determination is positive, the transaction manager
       is configured to, using the private key, send a transaction to the blockchain distributed
       database calling a function in the program to associate the commodity supplier file
       with the identifier; and

                                              25
                the commodity-measuring device receives the commodity from the selected
       commodity supplier according to the parameters defined in the commodity supplier
       file.
2.     A commodity-measuring device according to claim 1, wherein the commodity
measuring device is a smart meter.
3.     A commodity-measuring device according to either claim 1 or claim 2, further including
a key manager that is configured to generate the private key and a corresponding public key.
4.     A commodity-measuring device according to any one of the preceding claims, wherein
the transaction manager is configured to evaluate a matching function having at least the
commodity consumption data and the parameters in the commodity supplier file as variables
in order to determine autonomously whether to select the commodity supplier.
5.     A commodity-measuring device according to any one of the preceding claims, wherein
the transaction manager is further configured to send a second transaction, using the private
key, to the blockchain distributed database calling a function in the program to perform a
payment to the commodity supplier.
6.     A computer-implemented method for autonomously selecting a commodity supplier
among a plurality of commodity suppliers specified within a blockchain distributed database,
the method including:
        providing, by a microcontroller unit of a commodity-measuring device, commodity
consumption data to a transaction manager of the commodity-measuring device;
       storing, by a storage of the commodity-measuring device, a private key;
        retrieving, by a communication module of the commodity-measuring device, a
commodity supplier file stored in the blockchain distributed database, wherein the commodity
supplier file includes parameters of a commodity supplier and a program;

                                              26
        autonomously determining, by the transaction manager, based on the commodity
consumption data and the parameters in the commodity supplier file, whether to select the
commodity supplier;
        in those instances where the determination is positive, sending, by the transaction
manager, a transaction to the blockchain distributed database using the private key, wherein
the transaction calls a function in the program to associate the commodity supplier file with
the identifier; and
        receiving, by the commodity-measuring device, the commodity from the selected
commodity supplier according to the parameters defined in the commodity supplier file,
        wherein retrieving the commodity supplier file includes either:
                downloading a copy of the blockchain distributed database and sending the
        transaction by the transaction manager directly to the blockchain distributed
        database, or
                downloading a copy of the commodity supplier file and sending the transaction
        by the transaction manager to the blockchain distributed database via a server that
        maintains a copy of the blockchain distributed database.
7.      A method according to claim 6, further including generating, by a key manager, the
private key and a corresponding public key.
8.      A method according to either claim 6 or claim 7, wherein autonomously determining
whether to select the commodity supplier includes evaluating a matching function having at
least the commodity consumption data and the parameters in the commodity supplier file as
variables.
9.      A method according to any one of claims 6 to 8, further including sending, by the
transaction manager, a second transaction to the blockchain distributed database using the
private key, wherein the second transaction calls a function in the program to perform a
payment to the commodity supplier.

                                               27
10.    A computer program product including computer-readable instructions that, when
executed by one or more processors cause the one or more processors to perform
operations that autonomously select a commodity supplier from a plurality of commodity
suppliers specified within a blockchain distribution database, including:
              providing, by a microcontroller unit of a commodity-measuring device,
       commodity consumption data to a transaction manager of the commodity-measuring
       device;
              storing, by a storage of the commodity-measuring device, a private key;
              retrieving, by a communication module of the commodity-measuring device, a
       commodity supplier file stored in the blockchain distributed database, wherein the
       commodity supplier file includes parameters of a commodity supplier and a program;
              autonomously determining, by the transaction manager, based on the
       commodity consumption data and the parameters in the commodity supplier file,
       whether to select the commodity supplier;
              in those instances where the determination is positive, sending, by the
       transaction manager, a transaction to the blockchain distributed database using the
       private key, wherein the transaction calls a function in the program to associate the
       commodity supplier file with the identifier; and
              receiving, by the commodity-measuring device, the commodity from the
       selected commodity supplier according to the parameters defined in the commodity
       supplier file,
              wherein retrieving the commodity supplier file includes either:
                      downloading a copy of the blockchain distributed database and sending
              the transaction by the transaction manager directly to the blockchain
              distributed database, or
                      downloading a copy of the commodity supplier file and sending the
              transaction by the transaction manager to the blockchain distributed database
              via a server that maintains a copy of the blockchain distributed database.

                                                 28
11.     A system including:
        a blockchain distributed database configured to store a plurality of commodity supplier
files; and
        a commodity-measuring device, including:
               a microcontroller unit;
               a communication module configured to communicate with a network, wherein
        a communication from the communication module is associated with an identifier of
        the commodity-measuring device;
               a storage; and
               a transaction manager, wherein:
                      the microcontroller unit is configured to provide commodity consumption
               data to the transaction manager;
                      the storage is configured to store a private key;
                      the communication module is configured to either:
                               download a copy of the blockchain distributed database to
                      retrieve the commodity supplier file and send the transaction by the
                      transaction manager directly to the blockchain distributed database, or
                      download a copy of the commodity supplier file to retrieve the
                      commodity supplier file and send the transaction by the transaction
                      manager to the blockchain distributed database via a server that
                      maintains a copy of the blockchain distributed database; and
                               retrieve a commodity supplier file from the plurality of commodity
                      supplier files stored in the blockchain distributed database, wherein the
                      commodity supplier file includes parameters of a commodity supplier
                      and a program;
                      the transaction manager configured to determine autonomously, based
               on the commodity consumption data and the parameters in the commodity
               supplier file, whether to select the commodity supplier;
                      in those instances where the determination is positive, the transaction
               manager configured to, using the private key, send a transaction to the

                                                29
                blockchain distributed database calling a function in the program to associate
                the commodity supplier file with the identifier; and
                       the commodity-measuring device receives the commodity from the
                selected commodity supplier according to the parameters defined in the
                commodity supplier file.
1a.    A commodity-measuring device for autonomously selecting a commodity supplier
among a plurality of commodity suppliers being specified within a blockchain distributed
database, the commodity-measuring device including:
       a microcontroller unit;
       a communication module configured to communicate with a network, wherein a
communication from the communication module is associated with an identifier of the
commodity-measuring device;
       a storage; and
       a transaction manager; wherein:
       the microcontroller unit is configured to provide commodity consumption data to the
transaction manager;
       the storage is configured to store a private key;
       the communication module is configured to retrieve a commodity supplier file stored
in the blockchain distributed database, wherein the commodity supplier file includes
parameters of a commodity supplier and a program;
       the transaction manager is configured to determine autonomously, based on the
commodity consumption data and the parameters in the commodity supplier file, whether to
select the commodity supplier; and
        if the determination is positive, the transaction manager is configured to, using the
private key, send a transaction to the blockchain distributed database calling a function in
the program to associate the commodity supplier file with the identifier.
2a.    A method for autonomously selecting a commodity supplier among a plurality of
commodity suppliers being specified within a blockchain distributed database, the method
including:

                                               30
       providing, by a microcontroller unit, commodity consumption data to a transaction
manager;
       storing, by a storage, a private key;
       retrieving, by a communication module, a commodity supplier file stored in the
blockchain distributed database, wherein the commodity supplier file includes parameters of
a commodity supplier and a program;
       autonomously determining, by the transaction manager, based on the commodity
consumption data and the parameters in the commodity supplier file, whether to select the
commodity supplier; and
       if the determination is positive, sending, by the transaction manager, a transaction to
the blockchain distributed database using the private key, wherein the transaction calls a
function in the program to associate the commodity supplier file with the identifier.
3a.    A computer program product including computer-readable instructions that, when
loaded and executed on a suitable system, perform the steps of a method according to the
second aspect.
4a.    A system including:
       a commodity-using device according to the first aspect; and
       a permissioned blockchain distributed database configured to store commodity
supplier files including parameters of a commodity supplier and a program.

<removed-apn> <removed-date>
<removed-apn> <removed-date>
                            <removed-apn> <removed-date>
                 !
 "# "            $ % $
 "# "       & $$ &     '
$ ( ) * # ' & "" $ &#     $
" % +
    #   ,+ & ) - *#    )
 #$% "+     $ # %
  &    . ' %      ,  %+ %
% ($+ #% %
              /0

<removed-apn> <removed-date>
       <removed-apn>   <removed-date>
<U+2736><U+2735><U+2460><U+2735>

                          <removed-apn>    <removed-date>
                                     /$        +
  #%%       .     ' # " $               . " . ++ (-
 . + #$%  $        && . +1           #& $
                                            /0
    *   $     0  "# & # " $
$ 1             . " %

<removed-apn> <removed-date>
<removed-apn> <removed-date>
